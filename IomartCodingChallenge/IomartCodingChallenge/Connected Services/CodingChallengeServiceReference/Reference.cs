//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IomartCodingChallenge.CodingChallengeServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthInfo", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct AuthInfo : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct Message : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateSentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MessageIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateSent {
            get {
                return this.DateSentField;
            }
            set {
                if ((this.DateSentField.Equals(value) != true)) {
                    this.DateSentField = value;
                    this.RaisePropertyChanged("DateSent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MessageID {
            get {
                return this.MessageIDField;
            }
            set {
                if ((this.MessageIDField.Equals(value) != true)) {
                    this.MessageIDField = value;
                    this.RaisePropertyChanged("MessageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerCredentialType", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    public enum ServerCredentialType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SSH = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RDP = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HTTP = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HTTPS = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Database = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerCredential", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct ServerCredential : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SuPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.ServerCredentialType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UseSudoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceID {
            get {
                return this.ServiceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIDField, value) != true)) {
                    this.ServiceIDField = value;
                    this.RaisePropertyChanged("ServiceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SuPassword {
            get {
                return this.SuPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.SuPasswordField, value) != true)) {
                    this.SuPasswordField = value;
                    this.RaisePropertyChanged("SuPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.ServerCredentialType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseSudo {
            get {
                return this.UseSudoField;
            }
            set {
                if ((this.UseSudoField.Equals(value) != true)) {
                    this.UseSudoField = value;
                    this.RaisePropertyChanged("UseSudo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductType", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class ProductType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.ProductFeature[] FeaturesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MinMonthlyCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MinSetupCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoreInfoURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfProductsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descn {
            get {
                return this.DescnField;
            }
            set {
                if ((object.ReferenceEquals(this.DescnField, value) != true)) {
                    this.DescnField = value;
                    this.RaisePropertyChanged("Descn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.ProductFeature[] Features {
            get {
                return this.FeaturesField;
            }
            set {
                if ((object.ReferenceEquals(this.FeaturesField, value) != true)) {
                    this.FeaturesField = value;
                    this.RaisePropertyChanged("Features");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MinMonthlyCost {
            get {
                return this.MinMonthlyCostField;
            }
            set {
                if ((this.MinMonthlyCostField.Equals(value) != true)) {
                    this.MinMonthlyCostField = value;
                    this.RaisePropertyChanged("MinMonthlyCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MinSetupCost {
            get {
                return this.MinSetupCostField;
            }
            set {
                if ((this.MinSetupCostField.Equals(value) != true)) {
                    this.MinSetupCostField = value;
                    this.RaisePropertyChanged("MinSetupCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MoreInfoURL {
            get {
                return this.MoreInfoURLField;
            }
            set {
                if ((object.ReferenceEquals(this.MoreInfoURLField, value) != true)) {
                    this.MoreInfoURLField = value;
                    this.RaisePropertyChanged("MoreInfoURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfProducts {
            get {
                return this.NoOfProductsField;
            }
            set {
                if ((this.NoOfProductsField.Equals(value) != true)) {
                    this.NoOfProductsField = value;
                    this.RaisePropertyChanged("NoOfProducts");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductFeature", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class ProductFeature : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descn {
            get {
                return this.DescnField;
            }
            set {
                if ((object.ReferenceEquals(this.DescnField, value) != true)) {
                    this.DescnField = value;
                    this.RaisePropertyChanged("Descn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.Cost CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DiscountInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRecommendedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinimumTermField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.ProductFeature[] ProductFeaturesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ProductGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.ProductInfoField[] ProductInfoFieldsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.ProductSpec[] ProductSpecsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.Cost Cost {
            get {
                return this.CostField;
            }
            set {
                if ((object.ReferenceEquals(this.CostField, value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descn {
            get {
                return this.DescnField;
            }
            set {
                if ((object.ReferenceEquals(this.DescnField, value) != true)) {
                    this.DescnField = value;
                    this.RaisePropertyChanged("Descn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiscountInfo {
            get {
                return this.DiscountInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.DiscountInfoField, value) != true)) {
                    this.DiscountInfoField = value;
                    this.RaisePropertyChanged("DiscountInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRecommended {
            get {
                return this.IsRecommendedField;
            }
            set {
                if ((this.IsRecommendedField.Equals(value) != true)) {
                    this.IsRecommendedField = value;
                    this.RaisePropertyChanged("IsRecommended");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinimumTerm {
            get {
                return this.MinimumTermField;
            }
            set {
                if ((this.MinimumTermField.Equals(value) != true)) {
                    this.MinimumTermField = value;
                    this.RaisePropertyChanged("MinimumTerm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.ProductFeature[] ProductFeatures {
            get {
                return this.ProductFeaturesField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductFeaturesField, value) != true)) {
                    this.ProductFeaturesField = value;
                    this.RaisePropertyChanged("ProductFeatures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ProductGuid {
            get {
                return this.ProductGuidField;
            }
            set {
                if ((this.ProductGuidField.Equals(value) != true)) {
                    this.ProductGuidField = value;
                    this.RaisePropertyChanged("ProductGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.ProductInfoField[] ProductInfoFields {
            get {
                return this.ProductInfoFieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductInfoFieldsField, value) != true)) {
                    this.ProductInfoFieldsField = value;
                    this.RaisePropertyChanged("ProductInfoFields");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.ProductSpec[] ProductSpecs {
            get {
                return this.ProductSpecsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductSpecsField, value) != true)) {
                    this.ProductSpecsField = value;
                    this.RaisePropertyChanged("ProductSpecs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Cost", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class Cost : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AnnualCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AnnualDiscountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AnnualTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AnnualTextIncVATField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AnnualTotalCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AnnualVATCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BaseMonthlyCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BaseMonthlyTotalCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BaseMonthlyVATCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BaseSetupCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BaseSetupTotalCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BaseSetupVATCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DiscountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MonthlyCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MonthlyDiscountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonthlyTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonthlyTextIncVATField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MonthlyTotalCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MonthlyVATCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal QuarterlyCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal QuarterlyDiscountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuarterlyTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuarterlyTextIncVATField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal QuarterlyTotalCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal QuarterlyVATCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SetupCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SetupDiscountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SetupTotalCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SetupVATCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal VATRateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AnnualCost {
            get {
                return this.AnnualCostField;
            }
            set {
                if ((this.AnnualCostField.Equals(value) != true)) {
                    this.AnnualCostField = value;
                    this.RaisePropertyChanged("AnnualCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AnnualDiscount {
            get {
                return this.AnnualDiscountField;
            }
            set {
                if ((this.AnnualDiscountField.Equals(value) != true)) {
                    this.AnnualDiscountField = value;
                    this.RaisePropertyChanged("AnnualDiscount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AnnualText {
            get {
                return this.AnnualTextField;
            }
            set {
                if ((object.ReferenceEquals(this.AnnualTextField, value) != true)) {
                    this.AnnualTextField = value;
                    this.RaisePropertyChanged("AnnualText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AnnualTextIncVAT {
            get {
                return this.AnnualTextIncVATField;
            }
            set {
                if ((object.ReferenceEquals(this.AnnualTextIncVATField, value) != true)) {
                    this.AnnualTextIncVATField = value;
                    this.RaisePropertyChanged("AnnualTextIncVAT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AnnualTotalCost {
            get {
                return this.AnnualTotalCostField;
            }
            set {
                if ((this.AnnualTotalCostField.Equals(value) != true)) {
                    this.AnnualTotalCostField = value;
                    this.RaisePropertyChanged("AnnualTotalCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AnnualVATCost {
            get {
                return this.AnnualVATCostField;
            }
            set {
                if ((this.AnnualVATCostField.Equals(value) != true)) {
                    this.AnnualVATCostField = value;
                    this.RaisePropertyChanged("AnnualVATCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal BaseMonthlyCost {
            get {
                return this.BaseMonthlyCostField;
            }
            set {
                if ((this.BaseMonthlyCostField.Equals(value) != true)) {
                    this.BaseMonthlyCostField = value;
                    this.RaisePropertyChanged("BaseMonthlyCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal BaseMonthlyTotalCost {
            get {
                return this.BaseMonthlyTotalCostField;
            }
            set {
                if ((this.BaseMonthlyTotalCostField.Equals(value) != true)) {
                    this.BaseMonthlyTotalCostField = value;
                    this.RaisePropertyChanged("BaseMonthlyTotalCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal BaseMonthlyVATCost {
            get {
                return this.BaseMonthlyVATCostField;
            }
            set {
                if ((this.BaseMonthlyVATCostField.Equals(value) != true)) {
                    this.BaseMonthlyVATCostField = value;
                    this.RaisePropertyChanged("BaseMonthlyVATCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal BaseSetupCost {
            get {
                return this.BaseSetupCostField;
            }
            set {
                if ((this.BaseSetupCostField.Equals(value) != true)) {
                    this.BaseSetupCostField = value;
                    this.RaisePropertyChanged("BaseSetupCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal BaseSetupTotalCost {
            get {
                return this.BaseSetupTotalCostField;
            }
            set {
                if ((this.BaseSetupTotalCostField.Equals(value) != true)) {
                    this.BaseSetupTotalCostField = value;
                    this.RaisePropertyChanged("BaseSetupTotalCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal BaseSetupVATCost {
            get {
                return this.BaseSetupVATCostField;
            }
            set {
                if ((this.BaseSetupVATCostField.Equals(value) != true)) {
                    this.BaseSetupVATCostField = value;
                    this.RaisePropertyChanged("BaseSetupVATCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Discount {
            get {
                return this.DiscountField;
            }
            set {
                if ((this.DiscountField.Equals(value) != true)) {
                    this.DiscountField = value;
                    this.RaisePropertyChanged("Discount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MonthlyCost {
            get {
                return this.MonthlyCostField;
            }
            set {
                if ((this.MonthlyCostField.Equals(value) != true)) {
                    this.MonthlyCostField = value;
                    this.RaisePropertyChanged("MonthlyCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MonthlyDiscount {
            get {
                return this.MonthlyDiscountField;
            }
            set {
                if ((this.MonthlyDiscountField.Equals(value) != true)) {
                    this.MonthlyDiscountField = value;
                    this.RaisePropertyChanged("MonthlyDiscount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MonthlyText {
            get {
                return this.MonthlyTextField;
            }
            set {
                if ((object.ReferenceEquals(this.MonthlyTextField, value) != true)) {
                    this.MonthlyTextField = value;
                    this.RaisePropertyChanged("MonthlyText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MonthlyTextIncVAT {
            get {
                return this.MonthlyTextIncVATField;
            }
            set {
                if ((object.ReferenceEquals(this.MonthlyTextIncVATField, value) != true)) {
                    this.MonthlyTextIncVATField = value;
                    this.RaisePropertyChanged("MonthlyTextIncVAT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MonthlyTotalCost {
            get {
                return this.MonthlyTotalCostField;
            }
            set {
                if ((this.MonthlyTotalCostField.Equals(value) != true)) {
                    this.MonthlyTotalCostField = value;
                    this.RaisePropertyChanged("MonthlyTotalCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MonthlyVATCost {
            get {
                return this.MonthlyVATCostField;
            }
            set {
                if ((this.MonthlyVATCostField.Equals(value) != true)) {
                    this.MonthlyVATCostField = value;
                    this.RaisePropertyChanged("MonthlyVATCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal QuarterlyCost {
            get {
                return this.QuarterlyCostField;
            }
            set {
                if ((this.QuarterlyCostField.Equals(value) != true)) {
                    this.QuarterlyCostField = value;
                    this.RaisePropertyChanged("QuarterlyCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal QuarterlyDiscount {
            get {
                return this.QuarterlyDiscountField;
            }
            set {
                if ((this.QuarterlyDiscountField.Equals(value) != true)) {
                    this.QuarterlyDiscountField = value;
                    this.RaisePropertyChanged("QuarterlyDiscount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuarterlyText {
            get {
                return this.QuarterlyTextField;
            }
            set {
                if ((object.ReferenceEquals(this.QuarterlyTextField, value) != true)) {
                    this.QuarterlyTextField = value;
                    this.RaisePropertyChanged("QuarterlyText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuarterlyTextIncVAT {
            get {
                return this.QuarterlyTextIncVATField;
            }
            set {
                if ((object.ReferenceEquals(this.QuarterlyTextIncVATField, value) != true)) {
                    this.QuarterlyTextIncVATField = value;
                    this.RaisePropertyChanged("QuarterlyTextIncVAT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal QuarterlyTotalCost {
            get {
                return this.QuarterlyTotalCostField;
            }
            set {
                if ((this.QuarterlyTotalCostField.Equals(value) != true)) {
                    this.QuarterlyTotalCostField = value;
                    this.RaisePropertyChanged("QuarterlyTotalCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal QuarterlyVATCost {
            get {
                return this.QuarterlyVATCostField;
            }
            set {
                if ((this.QuarterlyVATCostField.Equals(value) != true)) {
                    this.QuarterlyVATCostField = value;
                    this.RaisePropertyChanged("QuarterlyVATCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SetupCost {
            get {
                return this.SetupCostField;
            }
            set {
                if ((this.SetupCostField.Equals(value) != true)) {
                    this.SetupCostField = value;
                    this.RaisePropertyChanged("SetupCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SetupDiscount {
            get {
                return this.SetupDiscountField;
            }
            set {
                if ((this.SetupDiscountField.Equals(value) != true)) {
                    this.SetupDiscountField = value;
                    this.RaisePropertyChanged("SetupDiscount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SetupTotalCost {
            get {
                return this.SetupTotalCostField;
            }
            set {
                if ((this.SetupTotalCostField.Equals(value) != true)) {
                    this.SetupTotalCostField = value;
                    this.RaisePropertyChanged("SetupTotalCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SetupVATCost {
            get {
                return this.SetupVATCostField;
            }
            set {
                if ((this.SetupVATCostField.Equals(value) != true)) {
                    this.SetupVATCostField = value;
                    this.RaisePropertyChanged("SetupVATCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal VATRate {
            get {
                return this.VATRateField;
            }
            set {
                if ((this.VATRateField.Equals(value) != true)) {
                    this.VATRateField = value;
                    this.RaisePropertyChanged("VATRate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductInfoField", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class ProductInfoField : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descn {
            get {
                return this.DescnField;
            }
            set {
                if ((object.ReferenceEquals(this.DescnField, value) != true)) {
                    this.DescnField = value;
                    this.RaisePropertyChanged("Descn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductSpec", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class ProductSpec : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descn {
            get {
                return this.DescnField;
            }
            set {
                if ((object.ReferenceEquals(this.DescnField, value) != true)) {
                    this.DescnField = value;
                    this.RaisePropertyChanged("Descn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductRule", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class ProductRule : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Category1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid Category1GuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Category2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid Category2GuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MustMatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Rule1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Rule2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category1 {
            get {
                return this.Category1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Category1Field, value) != true)) {
                    this.Category1Field = value;
                    this.RaisePropertyChanged("Category1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Category1Guid {
            get {
                return this.Category1GuidField;
            }
            set {
                if ((this.Category1GuidField.Equals(value) != true)) {
                    this.Category1GuidField = value;
                    this.RaisePropertyChanged("Category1Guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category2 {
            get {
                return this.Category2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Category2Field, value) != true)) {
                    this.Category2Field = value;
                    this.RaisePropertyChanged("Category2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Category2Guid {
            get {
                return this.Category2GuidField;
            }
            set {
                if ((this.Category2GuidField.Equals(value) != true)) {
                    this.Category2GuidField = value;
                    this.RaisePropertyChanged("Category2Guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MustMatch {
            get {
                return this.MustMatchField;
            }
            set {
                if ((this.MustMatchField.Equals(value) != true)) {
                    this.MustMatchField = value;
                    this.RaisePropertyChanged("MustMatch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductTypeId {
            get {
                return this.ProductTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeIdField, value) != true)) {
                    this.ProductTypeIdField = value;
                    this.RaisePropertyChanged("ProductTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Rule1 {
            get {
                return this.Rule1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Rule1Field, value) != true)) {
                    this.Rule1Field = value;
                    this.RaisePropertyChanged("Rule1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Rule2 {
            get {
                return this.Rule2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Rule2Field, value) != true)) {
                    this.Rule2Field = value;
                    this.RaisePropertyChanged("Rule2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductOptionGroup", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class ProductOptionGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.ProductOptionCategory[] CategoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HelpTextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.ProductOptionCategory[] Categories {
            get {
                return this.CategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesField, value) != true)) {
                    this.CategoriesField = value;
                    this.RaisePropertyChanged("Categories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HelpText {
            get {
                return this.HelpTextField;
            }
            set {
                if ((object.ReferenceEquals(this.HelpTextField, value) != true)) {
                    this.HelpTextField = value;
                    this.RaisePropertyChanged("HelpText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductOptionCategory", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct ProductOptionCategory : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CategoryGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DefaultOptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HelpTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.ProductOption[] OptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TextBasedField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CategoryGuid {
            get {
                return this.CategoryGuidField;
            }
            set {
                if ((this.CategoryGuidField.Equals(value) != true)) {
                    this.CategoryGuidField = value;
                    this.RaisePropertyChanged("CategoryGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DefaultOption {
            get {
                return this.DefaultOptionField;
            }
            set {
                if ((this.DefaultOptionField.Equals(value) != true)) {
                    this.DefaultOptionField = value;
                    this.RaisePropertyChanged("DefaultOption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HelpText {
            get {
                return this.HelpTextField;
            }
            set {
                if ((object.ReferenceEquals(this.HelpTextField, value) != true)) {
                    this.HelpTextField = value;
                    this.RaisePropertyChanged("HelpText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.ProductOption[] Options {
            get {
                return this.OptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionsField, value) != true)) {
                    this.OptionsField = value;
                    this.RaisePropertyChanged("Options");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TextBased {
            get {
                return this.TextBasedField;
            }
            set {
                if ((this.TextBasedField.Equals(value) != true)) {
                    this.TextBasedField = value;
                    this.RaisePropertyChanged("TextBased");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductOption", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class ProductOption : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CategoryGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MonthlyCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OptionGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OptionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SelectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SetupCostField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CategoryGuid {
            get {
                return this.CategoryGuidField;
            }
            set {
                if ((this.CategoryGuidField.Equals(value) != true)) {
                    this.CategoryGuidField = value;
                    this.RaisePropertyChanged("CategoryGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MonthlyCost {
            get {
                return this.MonthlyCostField;
            }
            set {
                if ((this.MonthlyCostField.Equals(value) != true)) {
                    this.MonthlyCostField = value;
                    this.RaisePropertyChanged("MonthlyCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OptionGuid {
            get {
                return this.OptionGuidField;
            }
            set {
                if ((this.OptionGuidField.Equals(value) != true)) {
                    this.OptionGuidField = value;
                    this.RaisePropertyChanged("OptionGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OptionId {
            get {
                return this.OptionIdField;
            }
            set {
                if ((this.OptionIdField.Equals(value) != true)) {
                    this.OptionIdField = value;
                    this.RaisePropertyChanged("OptionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Selected {
            get {
                return this.SelectedField;
            }
            set {
                if ((this.SelectedField.Equals(value) != true)) {
                    this.SelectedField = value;
                    this.RaisePropertyChanged("Selected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SetupCost {
            get {
                return this.SetupCostField;
            }
            set {
                if ((this.SetupCostField.Equals(value) != true)) {
                    this.SetupCostField = value;
                    this.RaisePropertyChanged("SetupCost");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChassisForSale", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class ChassisForSale : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CPUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CPUCoresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CPUFamilyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChassisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ChassisGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtrasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GPUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GPUCoresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HDDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasOOBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MonthlyCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfConnectedNicsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfNicsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RAIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RAMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SetupCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.ChassisForSaleType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CPU {
            get {
                return this.CPUField;
            }
            set {
                if ((object.ReferenceEquals(this.CPUField, value) != true)) {
                    this.CPUField = value;
                    this.RaisePropertyChanged("CPU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CPUCores {
            get {
                return this.CPUCoresField;
            }
            set {
                if ((this.CPUCoresField.Equals(value) != true)) {
                    this.CPUCoresField = value;
                    this.RaisePropertyChanged("CPUCores");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CPUFamily {
            get {
                return this.CPUFamilyField;
            }
            set {
                if ((object.ReferenceEquals(this.CPUFamilyField, value) != true)) {
                    this.CPUFamilyField = value;
                    this.RaisePropertyChanged("CPUFamily");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Chassis {
            get {
                return this.ChassisField;
            }
            set {
                if ((object.ReferenceEquals(this.ChassisField, value) != true)) {
                    this.ChassisField = value;
                    this.RaisePropertyChanged("Chassis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ChassisGuid {
            get {
                return this.ChassisGuidField;
            }
            set {
                if ((this.ChassisGuidField.Equals(value) != true)) {
                    this.ChassisGuidField = value;
                    this.RaisePropertyChanged("ChassisGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extras {
            get {
                return this.ExtrasField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtrasField, value) != true)) {
                    this.ExtrasField = value;
                    this.RaisePropertyChanged("Extras");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GPU {
            get {
                return this.GPUField;
            }
            set {
                if ((object.ReferenceEquals(this.GPUField, value) != true)) {
                    this.GPUField = value;
                    this.RaisePropertyChanged("GPU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GPUCores {
            get {
                return this.GPUCoresField;
            }
            set {
                if ((this.GPUCoresField.Equals(value) != true)) {
                    this.GPUCoresField = value;
                    this.RaisePropertyChanged("GPUCores");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HDD {
            get {
                return this.HDDField;
            }
            set {
                if ((object.ReferenceEquals(this.HDDField, value) != true)) {
                    this.HDDField = value;
                    this.RaisePropertyChanged("HDD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasOOB {
            get {
                return this.HasOOBField;
            }
            set {
                if ((this.HasOOBField.Equals(value) != true)) {
                    this.HasOOBField = value;
                    this.RaisePropertyChanged("HasOOB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MonthlyCost {
            get {
                return this.MonthlyCostField;
            }
            set {
                if ((this.MonthlyCostField.Equals(value) != true)) {
                    this.MonthlyCostField = value;
                    this.RaisePropertyChanged("MonthlyCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfConnectedNics {
            get {
                return this.NoOfConnectedNicsField;
            }
            set {
                if ((this.NoOfConnectedNicsField.Equals(value) != true)) {
                    this.NoOfConnectedNicsField = value;
                    this.RaisePropertyChanged("NoOfConnectedNics");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfNics {
            get {
                return this.NoOfNicsField;
            }
            set {
                if ((this.NoOfNicsField.Equals(value) != true)) {
                    this.NoOfNicsField = value;
                    this.RaisePropertyChanged("NoOfNics");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RAID {
            get {
                return this.RAIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RAIDField, value) != true)) {
                    this.RAIDField = value;
                    this.RaisePropertyChanged("RAID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RAM {
            get {
                return this.RAMField;
            }
            set {
                if ((object.ReferenceEquals(this.RAMField, value) != true)) {
                    this.RAMField = value;
                    this.RaisePropertyChanged("RAM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SetupCost {
            get {
                return this.SetupCostField;
            }
            set {
                if ((this.SetupCostField.Equals(value) != true)) {
                    this.SetupCostField = value;
                    this.RaisePropertyChanged("SetupCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.ChassisForSaleType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChassisForSaleType", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    public enum ChassisForSaleType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CPU = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GPU = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChassisGroup", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class ChassisGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CPUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChassisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ChassisGroupGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeliveryTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtrasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GPUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HDDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MonthlyCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfChassisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RAIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RAMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SetupCostField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CPU {
            get {
                return this.CPUField;
            }
            set {
                if ((object.ReferenceEquals(this.CPUField, value) != true)) {
                    this.CPUField = value;
                    this.RaisePropertyChanged("CPU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Chassis {
            get {
                return this.ChassisField;
            }
            set {
                if ((object.ReferenceEquals(this.ChassisField, value) != true)) {
                    this.ChassisField = value;
                    this.RaisePropertyChanged("Chassis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ChassisGroupGuid {
            get {
                return this.ChassisGroupGuidField;
            }
            set {
                if ((this.ChassisGroupGuidField.Equals(value) != true)) {
                    this.ChassisGroupGuidField = value;
                    this.RaisePropertyChanged("ChassisGroupGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeliveryTime {
            get {
                return this.DeliveryTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.DeliveryTimeField, value) != true)) {
                    this.DeliveryTimeField = value;
                    this.RaisePropertyChanged("DeliveryTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extras {
            get {
                return this.ExtrasField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtrasField, value) != true)) {
                    this.ExtrasField = value;
                    this.RaisePropertyChanged("Extras");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GPU {
            get {
                return this.GPUField;
            }
            set {
                if ((object.ReferenceEquals(this.GPUField, value) != true)) {
                    this.GPUField = value;
                    this.RaisePropertyChanged("GPU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HDD {
            get {
                return this.HDDField;
            }
            set {
                if ((object.ReferenceEquals(this.HDDField, value) != true)) {
                    this.HDDField = value;
                    this.RaisePropertyChanged("HDD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MonthlyCost {
            get {
                return this.MonthlyCostField;
            }
            set {
                if ((this.MonthlyCostField.Equals(value) != true)) {
                    this.MonthlyCostField = value;
                    this.RaisePropertyChanged("MonthlyCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfChassis {
            get {
                return this.NoOfChassisField;
            }
            set {
                if ((this.NoOfChassisField.Equals(value) != true)) {
                    this.NoOfChassisField = value;
                    this.RaisePropertyChanged("NoOfChassis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RAID {
            get {
                return this.RAIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RAIDField, value) != true)) {
                    this.RAIDField = value;
                    this.RaisePropertyChanged("RAID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RAM {
            get {
                return this.RAMField;
            }
            set {
                if ((object.ReferenceEquals(this.RAMField, value) != true)) {
                    this.RAMField = value;
                    this.RaisePropertyChanged("RAM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SetupCost {
            get {
                return this.SetupCostField;
            }
            set {
                if ((this.SetupCostField.Equals(value) != true)) {
                    this.SetupCostField = value;
                    this.RaisePropertyChanged("SetupCost");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Basket", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class Basket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid BasketGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.BillingPeriod BillingPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.Cost CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateExpiresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPCountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.BasketItem[] ItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RefererField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemoteIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserAgentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid BasketGuid {
            get {
                return this.BasketGuidField;
            }
            set {
                if ((this.BasketGuidField.Equals(value) != true)) {
                    this.BasketGuidField = value;
                    this.RaisePropertyChanged("BasketGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.BillingPeriod BillingPeriod {
            get {
                return this.BillingPeriodField;
            }
            set {
                if ((this.BillingPeriodField.Equals(value) != true)) {
                    this.BillingPeriodField = value;
                    this.RaisePropertyChanged("BillingPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.Cost Cost {
            get {
                return this.CostField;
            }
            set {
                if ((object.ReferenceEquals(this.CostField, value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateExpires {
            get {
                return this.DateExpiresField;
            }
            set {
                if ((this.DateExpiresField.Equals(value) != true)) {
                    this.DateExpiresField = value;
                    this.RaisePropertyChanged("DateExpires");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPCountry {
            get {
                return this.IPCountryField;
            }
            set {
                if ((object.ReferenceEquals(this.IPCountryField, value) != true)) {
                    this.IPCountryField = value;
                    this.RaisePropertyChanged("IPCountry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.BasketItem[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastModified {
            get {
                return this.LastModifiedField;
            }
            set {
                if ((this.LastModifiedField.Equals(value) != true)) {
                    this.LastModifiedField = value;
                    this.RaisePropertyChanged("LastModified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Locked {
            get {
                return this.LockedField;
            }
            set {
                if ((this.LockedField.Equals(value) != true)) {
                    this.LockedField = value;
                    this.RaisePropertyChanged("Locked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Referer {
            get {
                return this.RefererField;
            }
            set {
                if ((object.ReferenceEquals(this.RefererField, value) != true)) {
                    this.RefererField = value;
                    this.RaisePropertyChanged("Referer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RemoteIP {
            get {
                return this.RemoteIPField;
            }
            set {
                if ((object.ReferenceEquals(this.RemoteIPField, value) != true)) {
                    this.RemoteIPField = value;
                    this.RaisePropertyChanged("RemoteIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserAgent {
            get {
                return this.UserAgentField;
            }
            set {
                if ((object.ReferenceEquals(this.UserAgentField, value) != true)) {
                    this.UserAgentField = value;
                    this.RaisePropertyChanged("UserAgent");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BillingPeriod", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    public enum BillingPeriod : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Monthly = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Quarterly = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Annually = 12,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BasketItem", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class BasketItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ContractLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.Cost CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DiscountInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPToInstallOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ItemGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.BasketItemOption[] OptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ProductGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ContractLength {
            get {
                return this.ContractLengthField;
            }
            set {
                if ((this.ContractLengthField.Equals(value) != true)) {
                    this.ContractLengthField = value;
                    this.RaisePropertyChanged("ContractLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.Cost Cost {
            get {
                return this.CostField;
            }
            set {
                if ((object.ReferenceEquals(this.CostField, value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descn {
            get {
                return this.DescnField;
            }
            set {
                if ((object.ReferenceEquals(this.DescnField, value) != true)) {
                    this.DescnField = value;
                    this.RaisePropertyChanged("Descn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiscountInfo {
            get {
                return this.DiscountInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.DiscountInfoField, value) != true)) {
                    this.DiscountInfoField = value;
                    this.RaisePropertyChanged("DiscountInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPToInstallOn {
            get {
                return this.IPToInstallOnField;
            }
            set {
                if ((object.ReferenceEquals(this.IPToInstallOnField, value) != true)) {
                    this.IPToInstallOnField = value;
                    this.RaisePropertyChanged("IPToInstallOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ItemGuid {
            get {
                return this.ItemGuidField;
            }
            set {
                if ((this.ItemGuidField.Equals(value) != true)) {
                    this.ItemGuidField = value;
                    this.RaisePropertyChanged("ItemGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.BasketItemOption[] Options {
            get {
                return this.OptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionsField, value) != true)) {
                    this.OptionsField = value;
                    this.RaisePropertyChanged("Options");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ProductGuid {
            get {
                return this.ProductGuidField;
            }
            set {
                if ((this.ProductGuidField.Equals(value) != true)) {
                    this.ProductGuidField = value;
                    this.RaisePropertyChanged("ProductGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductType {
            get {
                return this.ProductTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeField, value) != true)) {
                    this.ProductTypeField = value;
                    this.RaisePropertyChanged("ProductType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceID {
            get {
                return this.ServiceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIDField, value) != true)) {
                    this.ServiceIDField = value;
                    this.RaisePropertyChanged("ServiceID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BasketItemOption", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class BasketItemOption : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CategoryGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OptionGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CategoryGuid {
            get {
                return this.CategoryGuidField;
            }
            set {
                if ((this.CategoryGuidField.Equals(value) != true)) {
                    this.CategoryGuidField = value;
                    this.RaisePropertyChanged("CategoryGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OptionGuid {
            get {
                return this.OptionGuidField;
            }
            set {
                if ((this.OptionGuidField.Equals(value) != true)) {
                    this.OptionGuidField = value;
                    this.RaisePropertyChanged("OptionGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.Cost CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.OrderItem[] ItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderRefField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrivateRefField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.Cost Cost {
            get {
                return this.CostField;
            }
            set {
                if ((object.ReferenceEquals(this.CostField, value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.OrderItem[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderRef {
            get {
                return this.OrderRefField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderRefField, value) != true)) {
                    this.OrderRefField = value;
                    this.RaisePropertyChanged("OrderRef");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrivateRef {
            get {
                return this.PrivateRefField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateRefField, value) != true)) {
                    this.PrivateRefField = value;
                    this.RaisePropertyChanged("PrivateRef");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderItem", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class OrderItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.Cost CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.Cost Cost {
            get {
                return this.CostField;
            }
            set {
                if ((object.ReferenceEquals(this.CostField, value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descn {
            get {
                return this.DescnField;
            }
            set {
                if ((object.ReferenceEquals(this.DescnField, value) != true)) {
                    this.DescnField = value;
                    this.RaisePropertyChanged("Descn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceID {
            get {
                return this.ServiceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIDField, value) != true)) {
                    this.ServiceIDField = value;
                    this.RaisePropertyChanged("ServiceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FAQ", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class FAQ : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FooterTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeaderTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.FAQSection[] SectionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FooterText {
            get {
                return this.FooterTextField;
            }
            set {
                if ((object.ReferenceEquals(this.FooterTextField, value) != true)) {
                    this.FooterTextField = value;
                    this.RaisePropertyChanged("FooterText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HeaderText {
            get {
                return this.HeaderTextField;
            }
            set {
                if ((object.ReferenceEquals(this.HeaderTextField, value) != true)) {
                    this.HeaderTextField = value;
                    this.RaisePropertyChanged("HeaderText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.FAQSection[] Sections {
            get {
                return this.SectionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SectionsField, value) != true)) {
                    this.SectionsField = value;
                    this.RaisePropertyChanged("Sections");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FAQSection", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class FAQSection : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.FAQQuestion[] QuestionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SectionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.FAQQuestion[] Questions {
            get {
                return this.QuestionsField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionsField, value) != true)) {
                    this.QuestionsField = value;
                    this.RaisePropertyChanged("Questions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Section {
            get {
                return this.SectionField;
            }
            set {
                if ((object.ReferenceEquals(this.SectionField, value) != true)) {
                    this.SectionField = value;
                    this.RaisePropertyChanged("Section");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SectionID {
            get {
                return this.SectionIDField;
            }
            set {
                if ((this.SectionIDField.Equals(value) != true)) {
                    this.SectionIDField = value;
                    this.RaisePropertyChanged("SectionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FAQQuestion", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class FAQQuestion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuestionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuestionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Answer {
            get {
                return this.AnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswerField, value) != true)) {
                    this.AnswerField = value;
                    this.RaisePropertyChanged("Answer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Question {
            get {
                return this.QuestionField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionField, value) != true)) {
                    this.QuestionField = value;
                    this.RaisePropertyChanged("Question");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuestionID {
            get {
                return this.QuestionIDField;
            }
            set {
                if ((this.QuestionIDField.Equals(value) != true)) {
                    this.QuestionIDField = value;
                    this.RaisePropertyChanged("QuestionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NullRoute", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class NullRoute : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateAddedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastReviewedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateAdded {
            get {
                return this.DateAddedField;
            }
            set {
                if ((this.DateAddedField.Equals(value) != true)) {
                    this.DateAddedField = value;
                    this.RaisePropertyChanged("DateAdded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddress {
            get {
                return this.IPAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressField, value) != true)) {
                    this.IPAddressField = value;
                    this.RaisePropertyChanged("IPAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastReviewed {
            get {
                return this.LastReviewedField;
            }
            set {
                if ((this.LastReviewedField.Equals(value) != true)) {
                    this.LastReviewedField = value;
                    this.RaisePropertyChanged("LastReviewed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPSafeListEntry", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    [System.SerializableAttribute()]
    public partial class IPSafeListEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddress {
            get {
                return this.IPAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressField, value) != true)) {
                    this.IPAddressField = value;
                    this.RaisePropertyChanged("IPAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Licence", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct Licence : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExpiryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProviderReferenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.LicenceType TypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExpiryDate {
            get {
                return this.ExpiryDateField;
            }
            set {
                if ((this.ExpiryDateField.Equals(value) != true)) {
                    this.ExpiryDateField = value;
                    this.RaisePropertyChanged("ExpiryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProviderReference {
            get {
                return this.ProviderReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderReferenceField, value) != true)) {
                    this.ProviderReferenceField = value;
                    this.RaisePropertyChanged("ProviderReference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceId {
            get {
                return this.ServiceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIdField, value) != true)) {
                    this.ServiceIdField = value;
                    this.RaisePropertyChanged("ServiceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.LicenceType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenceType", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    public enum LicenceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cPanel = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cPanelVPS = 404,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AvailableLicenceType", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct AvailableLicenceType : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.LicenceType LicenceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProviderField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Cost {
            get {
                return this.CostField;
            }
            set {
                if ((this.CostField.Equals(value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.LicenceType LicenceType {
            get {
                return this.LicenceTypeField;
            }
            set {
                if ((this.LicenceTypeField.Equals(value) != true)) {
                    this.LicenceTypeField = value;
                    this.RaisePropertyChanged("LicenceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Provider {
            get {
                return this.ProviderField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderField, value) != true)) {
                    this.ProviderField = value;
                    this.RaisePropertyChanged("Provider");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientInfo", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class ClientInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ClientGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostcodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TelNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaxNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPayPalEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.IPVersion IPVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VATNumberPrefixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VATNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfUnpaidInvoicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfOverdueInvoicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.ContactInfo[] ContactsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ClientGuid {
            get {
                return this.ClientGuidField;
            }
            set {
                if ((this.ClientGuidField.Equals(value) != true)) {
                    this.ClientGuidField = value;
                    this.RaisePropertyChanged("ClientGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientName {
            get {
                return this.ClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientNameField, value) != true)) {
                    this.ClientNameField = value;
                    this.RaisePropertyChanged("ClientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastModified {
            get {
                return this.LastModifiedField;
            }
            set {
                if ((this.LastModifiedField.Equals(value) != true)) {
                    this.LastModifiedField = value;
                    this.RaisePropertyChanged("LastModified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string Address1 {
            get {
                return this.Address1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address1Field, value) != true)) {
                    this.Address1Field = value;
                    this.RaisePropertyChanged("Address1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string Address2 {
            get {
                return this.Address2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address2Field, value) != true)) {
                    this.Address2Field = value;
                    this.RaisePropertyChanged("Address2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string Address3 {
            get {
                return this.Address3Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address3Field, value) != true)) {
                    this.Address3Field = value;
                    this.RaisePropertyChanged("Address3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string Address4 {
            get {
                return this.Address4Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address4Field, value) != true)) {
                    this.Address4Field = value;
                    this.RaisePropertyChanged("Address4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string Postcode {
            get {
                return this.PostcodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PostcodeField, value) != true)) {
                    this.PostcodeField = value;
                    this.RaisePropertyChanged("Postcode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public string TelNo {
            get {
                return this.TelNoField;
            }
            set {
                if ((object.ReferenceEquals(this.TelNoField, value) != true)) {
                    this.TelNoField = value;
                    this.RaisePropertyChanged("TelNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public string FaxNo {
            get {
                return this.FaxNoField;
            }
            set {
                if ((object.ReferenceEquals(this.FaxNoField, value) != true)) {
                    this.FaxNoField = value;
                    this.RaisePropertyChanged("FaxNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public bool IsPayPalEnabled {
            get {
                return this.IsPayPalEnabledField;
            }
            set {
                if ((this.IsPayPalEnabledField.Equals(value) != true)) {
                    this.IsPayPalEnabledField = value;
                    this.RaisePropertyChanged("IsPayPalEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public IomartCodingChallenge.CodingChallengeServiceReference.IPVersion IPVersion {
            get {
                return this.IPVersionField;
            }
            set {
                if ((this.IPVersionField.Equals(value) != true)) {
                    this.IPVersionField = value;
                    this.RaisePropertyChanged("IPVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=14)]
        public string VATNumberPrefix {
            get {
                return this.VATNumberPrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.VATNumberPrefixField, value) != true)) {
                    this.VATNumberPrefixField = value;
                    this.RaisePropertyChanged("VATNumberPrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=15)]
        public string VATNumber {
            get {
                return this.VATNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VATNumberField, value) != true)) {
                    this.VATNumberField = value;
                    this.RaisePropertyChanged("VATNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=16)]
        public decimal Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=17)]
        public int NoOfUnpaidInvoices {
            get {
                return this.NoOfUnpaidInvoicesField;
            }
            set {
                if ((this.NoOfUnpaidInvoicesField.Equals(value) != true)) {
                    this.NoOfUnpaidInvoicesField = value;
                    this.RaisePropertyChanged("NoOfUnpaidInvoices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=18)]
        public int NoOfOverdueInvoices {
            get {
                return this.NoOfOverdueInvoicesField;
            }
            set {
                if ((this.NoOfOverdueInvoicesField.Equals(value) != true)) {
                    this.NoOfOverdueInvoicesField = value;
                    this.RaisePropertyChanged("NoOfOverdueInvoices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=19)]
        public IomartCodingChallenge.CodingChallengeServiceReference.ContactInfo[] Contacts {
            get {
                return this.ContactsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactsField, value) != true)) {
                    this.ContactsField = value;
                    this.RaisePropertyChanged("Contacts");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPVersion", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    public enum IPVersion : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IPv4 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IPv6 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dual = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContactInfo", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial class ContactInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.ContactType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TelNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.ContactType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string TelNo {
            get {
                return this.TelNoField;
            }
            set {
                if ((object.ReferenceEquals(this.TelNoField, value) != true)) {
                    this.TelNoField = value;
                    this.RaisePropertyChanged("TelNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContactType", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    public enum ContactType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Tech = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Billing = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Emergency = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerInfo", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct ServerInfo : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BandwidthUrlBaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CancellationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateAddedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ExtraCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] IPAddressesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] IPv4AddressesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] IPv6AddressesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal NormalCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimaryIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimaryIPv4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimaryIPv6Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.ReverseDnsEntry[] ReverseDnsEntriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuspendedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuspendedByRapidSwitchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string YourReferenceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BandwidthUrlBase {
            get {
                return this.BandwidthUrlBaseField;
            }
            set {
                if ((object.ReferenceEquals(this.BandwidthUrlBaseField, value) != true)) {
                    this.BandwidthUrlBaseField = value;
                    this.RaisePropertyChanged("BandwidthUrlBase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CancellationDate {
            get {
                return this.CancellationDateField;
            }
            set {
                if ((this.CancellationDateField.Equals(value) != true)) {
                    this.CancellationDateField = value;
                    this.RaisePropertyChanged("CancellationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateAdded {
            get {
                return this.DateAddedField;
            }
            set {
                if ((this.DateAddedField.Equals(value) != true)) {
                    this.DateAddedField = value;
                    this.RaisePropertyChanged("DateAdded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceType {
            get {
                return this.DeviceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceTypeField, value) != true)) {
                    this.DeviceTypeField = value;
                    this.RaisePropertyChanged("DeviceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ExtraCost {
            get {
                return this.ExtraCostField;
            }
            set {
                if ((this.ExtraCostField.Equals(value) != true)) {
                    this.ExtraCostField = value;
                    this.RaisePropertyChanged("ExtraCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] IPAddresses {
            get {
                return this.IPAddressesField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressesField, value) != true)) {
                    this.IPAddressesField = value;
                    this.RaisePropertyChanged("IPAddresses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] IPv4Addresses {
            get {
                return this.IPv4AddressesField;
            }
            set {
                if ((object.ReferenceEquals(this.IPv4AddressesField, value) != true)) {
                    this.IPv4AddressesField = value;
                    this.RaisePropertyChanged("IPv4Addresses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] IPv6Addresses {
            get {
                return this.IPv6AddressesField;
            }
            set {
                if ((object.ReferenceEquals(this.IPv6AddressesField, value) != true)) {
                    this.IPv6AddressesField = value;
                    this.RaisePropertyChanged("IPv6Addresses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal NormalCost {
            get {
                return this.NormalCostField;
            }
            set {
                if ((this.NormalCostField.Equals(value) != true)) {
                    this.NormalCostField = value;
                    this.RaisePropertyChanged("NormalCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrimaryIP {
            get {
                return this.PrimaryIPField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryIPField, value) != true)) {
                    this.PrimaryIPField = value;
                    this.RaisePropertyChanged("PrimaryIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrimaryIPv4 {
            get {
                return this.PrimaryIPv4Field;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryIPv4Field, value) != true)) {
                    this.PrimaryIPv4Field = value;
                    this.RaisePropertyChanged("PrimaryIPv4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrimaryIPv6 {
            get {
                return this.PrimaryIPv6Field;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryIPv6Field, value) != true)) {
                    this.PrimaryIPv6Field = value;
                    this.RaisePropertyChanged("PrimaryIPv6");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.ReverseDnsEntry[] ReverseDnsEntries {
            get {
                return this.ReverseDnsEntriesField;
            }
            set {
                if ((object.ReferenceEquals(this.ReverseDnsEntriesField, value) != true)) {
                    this.ReverseDnsEntriesField = value;
                    this.RaisePropertyChanged("ReverseDnsEntries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceDescription {
            get {
                return this.ServiceDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceDescriptionField, value) != true)) {
                    this.ServiceDescriptionField = value;
                    this.RaisePropertyChanged("ServiceDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceID {
            get {
                return this.ServiceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIDField, value) != true)) {
                    this.ServiceIDField = value;
                    this.RaisePropertyChanged("ServiceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceType {
            get {
                return this.ServiceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceTypeField, value) != true)) {
                    this.ServiceTypeField = value;
                    this.RaisePropertyChanged("ServiceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Suspended {
            get {
                return this.SuspendedField;
            }
            set {
                if ((this.SuspendedField.Equals(value) != true)) {
                    this.SuspendedField = value;
                    this.RaisePropertyChanged("Suspended");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SuspendedByRapidSwitch {
            get {
                return this.SuspendedByRapidSwitchField;
            }
            set {
                if ((this.SuspendedByRapidSwitchField.Equals(value) != true)) {
                    this.SuspendedByRapidSwitchField = value;
                    this.RaisePropertyChanged("SuspendedByRapidSwitch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string YourReference {
            get {
                return this.YourReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.YourReferenceField, value) != true)) {
                    this.YourReferenceField = value;
                    this.RaisePropertyChanged("YourReference");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReverseDnsEntry", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct ReverseDnsEntry : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPAddressField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostName {
            get {
                return this.HostNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostNameField, value) != true)) {
                    this.HostNameField = value;
                    this.RaisePropertyChanged("HostName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddress {
            get {
                return this.IPAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressField, value) != true)) {
                    this.IPAddressField = value;
                    this.RaisePropertyChanged("IPAddress");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerStatusSearch", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    public enum ServerStatusSearch : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitingBuild = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitingDelivery = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitingInstallation = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Built = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cancelled = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerServiceTypeSearch", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    public enum ServerServiceTypeSearch : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Colo = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dedi = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ManagedRack = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rack = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Transit = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VPS = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerDeviceTypeSearch", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    public enum ServerDeviceTypeSearch : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Access_Point = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Firewall = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Full_Rack = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Load_Balancer = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Managed_Rack = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Managed_Switch = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Modem = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Router = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Server = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Transit = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unmanaged_Switch = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Virtual_Server = 12,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NICInfo", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct NICInfo : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConnectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConnectedToRapidSwitchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectedToServerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ConnectedToServerNicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] IPAddressesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NICIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurposeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Connected {
            get {
                return this.ConnectedField;
            }
            set {
                if ((this.ConnectedField.Equals(value) != true)) {
                    this.ConnectedField = value;
                    this.RaisePropertyChanged("Connected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ConnectedToRapidSwitch {
            get {
                return this.ConnectedToRapidSwitchField;
            }
            set {
                if ((this.ConnectedToRapidSwitchField.Equals(value) != true)) {
                    this.ConnectedToRapidSwitchField = value;
                    this.RaisePropertyChanged("ConnectedToRapidSwitch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectedToServer {
            get {
                return this.ConnectedToServerField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectedToServerField, value) != true)) {
                    this.ConnectedToServerField = value;
                    this.RaisePropertyChanged("ConnectedToServer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ConnectedToServerNic {
            get {
                return this.ConnectedToServerNicField;
            }
            set {
                if ((this.ConnectedToServerNicField.Equals(value) != true)) {
                    this.ConnectedToServerNicField = value;
                    this.RaisePropertyChanged("ConnectedToServerNic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] IPAddresses {
            get {
                return this.IPAddressesField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressesField, value) != true)) {
                    this.IPAddressesField = value;
                    this.RaisePropertyChanged("IPAddresses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NICID {
            get {
                return this.NICIDField;
            }
            set {
                if ((this.NICIDField.Equals(value) != true)) {
                    this.NICIDField = value;
                    this.RaisePropertyChanged("NICID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purpose {
            get {
                return this.PurposeField;
            }
            set {
                if ((object.ReferenceEquals(this.PurposeField, value) != true)) {
                    this.PurposeField = value;
                    this.RaisePropertyChanged("Purpose");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPInfo", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct IPInfo : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CIDRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DNSServer1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DNSServer2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DNSServer3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultGatewayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool InUseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NullRoutedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrefixLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReverseDNSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SubnetIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubnetMaskField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CIDR {
            get {
                return this.CIDRField;
            }
            set {
                if ((object.ReferenceEquals(this.CIDRField, value) != true)) {
                    this.CIDRField = value;
                    this.RaisePropertyChanged("CIDR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DNSServer1 {
            get {
                return this.DNSServer1Field;
            }
            set {
                if ((object.ReferenceEquals(this.DNSServer1Field, value) != true)) {
                    this.DNSServer1Field = value;
                    this.RaisePropertyChanged("DNSServer1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DNSServer2 {
            get {
                return this.DNSServer2Field;
            }
            set {
                if ((object.ReferenceEquals(this.DNSServer2Field, value) != true)) {
                    this.DNSServer2Field = value;
                    this.RaisePropertyChanged("DNSServer2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DNSServer3 {
            get {
                return this.DNSServer3Field;
            }
            set {
                if ((object.ReferenceEquals(this.DNSServer3Field, value) != true)) {
                    this.DNSServer3Field = value;
                    this.RaisePropertyChanged("DNSServer3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultGateway {
            get {
                return this.DefaultGatewayField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultGatewayField, value) != true)) {
                    this.DefaultGatewayField = value;
                    this.RaisePropertyChanged("DefaultGateway");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstAddress {
            get {
                return this.FirstAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstAddressField, value) != true)) {
                    this.FirstAddressField = value;
                    this.RaisePropertyChanged("FirstAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddress {
            get {
                return this.IPAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressField, value) != true)) {
                    this.IPAddressField = value;
                    this.RaisePropertyChanged("IPAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InUse {
            get {
                return this.InUseField;
            }
            set {
                if ((this.InUseField.Equals(value) != true)) {
                    this.InUseField = value;
                    this.RaisePropertyChanged("InUse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastAddress {
            get {
                return this.LastAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.LastAddressField, value) != true)) {
                    this.LastAddressField = value;
                    this.RaisePropertyChanged("LastAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NullRouted {
            get {
                return this.NullRoutedField;
            }
            set {
                if ((this.NullRoutedField.Equals(value) != true)) {
                    this.NullRoutedField = value;
                    this.RaisePropertyChanged("NullRouted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrefixLength {
            get {
                return this.PrefixLengthField;
            }
            set {
                if ((this.PrefixLengthField.Equals(value) != true)) {
                    this.PrefixLengthField = value;
                    this.RaisePropertyChanged("PrefixLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReverseDNS {
            get {
                return this.ReverseDNSField;
            }
            set {
                if ((object.ReferenceEquals(this.ReverseDNSField, value) != true)) {
                    this.ReverseDNSField = value;
                    this.RaisePropertyChanged("ReverseDNS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SubnetID {
            get {
                return this.SubnetIDField;
            }
            set {
                if ((this.SubnetIDField.Equals(value) != true)) {
                    this.SubnetIDField = value;
                    this.RaisePropertyChanged("SubnetID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubnetMask {
            get {
                return this.SubnetMaskField;
            }
            set {
                if ((object.ReferenceEquals(this.SubnetMaskField, value) != true)) {
                    this.SubnetMaskField = value;
                    this.RaisePropertyChanged("SubnetMask");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestStatus", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct RequestStatus : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateCompletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateRequestedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RequestIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateCompleted {
            get {
                return this.DateCompletedField;
            }
            set {
                if ((this.DateCompletedField.Equals(value) != true)) {
                    this.DateCompletedField = value;
                    this.RaisePropertyChanged("DateCompleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateRequested {
            get {
                return this.DateRequestedField;
            }
            set {
                if ((this.DateRequestedField.Equals(value) != true)) {
                    this.DateRequestedField = value;
                    this.RaisePropertyChanged("DateRequested");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequestId {
            get {
                return this.RequestIdField;
            }
            set {
                if ((this.RequestIdField.Equals(value) != true)) {
                    this.RequestIdField = value;
                    this.RaisePropertyChanged("RequestId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestType {
            get {
                return this.RequestTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestTypeField, value) != true)) {
                    this.RequestTypeField = value;
                    this.RaisePropertyChanged("RequestType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceID {
            get {
                return this.ServiceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIDField, value) != true)) {
                    this.ServiceIDField = value;
                    this.RaisePropertyChanged("ServiceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestStatusSearch", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    public enum RequestStatusSearch : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pending = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Completed = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RecoverySessionDetails", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct RecoverySessionDetails : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RecoveryModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequestIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RecoveryMode {
            get {
                return this.RecoveryModeField;
            }
            set {
                if ((this.RecoveryModeField.Equals(value) != true)) {
                    this.RecoveryModeField = value;
                    this.RaisePropertyChanged("RecoveryMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequestID {
            get {
                return this.RequestIDField;
            }
            set {
                if ((this.RequestIDField.Equals(value) != true)) {
                    this.RequestIDField = value;
                    this.RaisePropertyChanged("RequestID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestType {
            get {
                return this.RequestTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestTypeField, value) != true)) {
                    this.RequestTypeField = value;
                    this.RaisePropertyChanged("RequestType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceID {
            get {
                return this.ServiceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIDField, value) != true)) {
                    this.ServiceIDField = value;
                    this.RaisePropertyChanged("ServiceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CancellationReason", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    public enum CancellationReason : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MovingToAnotherProvider = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoLongerNeedService = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpgradingToAnotherRapidSwitchService = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnsatisfiedWithServiceLevel = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Other = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ServiceTooExpensive = 10,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonthlyBandwidthReportEntry", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct MonthlyBandwidthReportEntry : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BW95thPercentileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BWInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BWOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BWTotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime MonthField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BW95thPercentile {
            get {
                return this.BW95thPercentileField;
            }
            set {
                if ((this.BW95thPercentileField.Equals(value) != true)) {
                    this.BW95thPercentileField = value;
                    this.RaisePropertyChanged("BW95thPercentile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BWIn {
            get {
                return this.BWInField;
            }
            set {
                if ((this.BWInField.Equals(value) != true)) {
                    this.BWInField = value;
                    this.RaisePropertyChanged("BWIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BWOut {
            get {
                return this.BWOutField;
            }
            set {
                if ((this.BWOutField.Equals(value) != true)) {
                    this.BWOutField = value;
                    this.RaisePropertyChanged("BWOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BWTotal {
            get {
                return this.BWTotalField;
            }
            set {
                if ((this.BWTotalField.Equals(value) != true)) {
                    this.BWTotalField = value;
                    this.RaisePropertyChanged("BWTotal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Month {
            get {
                return this.MonthField;
            }
            set {
                if ((this.MonthField.Equals(value) != true)) {
                    this.MonthField = value;
                    this.RaisePropertyChanged("Month");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BandwidthReport", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct BandwidthReport : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BW24hInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BW24hOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BW4hInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BW4hOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BWPredicted14dInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BWPredicted14dOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BWPredicted24hInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BWPredicted24hOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BWSofarThisMonthInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BWSofarThisMonthOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdatedField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BW24hIn {
            get {
                return this.BW24hInField;
            }
            set {
                if ((this.BW24hInField.Equals(value) != true)) {
                    this.BW24hInField = value;
                    this.RaisePropertyChanged("BW24hIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BW24hOut {
            get {
                return this.BW24hOutField;
            }
            set {
                if ((this.BW24hOutField.Equals(value) != true)) {
                    this.BW24hOutField = value;
                    this.RaisePropertyChanged("BW24hOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BW4hIn {
            get {
                return this.BW4hInField;
            }
            set {
                if ((this.BW4hInField.Equals(value) != true)) {
                    this.BW4hInField = value;
                    this.RaisePropertyChanged("BW4hIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BW4hOut {
            get {
                return this.BW4hOutField;
            }
            set {
                if ((this.BW4hOutField.Equals(value) != true)) {
                    this.BW4hOutField = value;
                    this.RaisePropertyChanged("BW4hOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BWPredicted14dIn {
            get {
                return this.BWPredicted14dInField;
            }
            set {
                if ((this.BWPredicted14dInField.Equals(value) != true)) {
                    this.BWPredicted14dInField = value;
                    this.RaisePropertyChanged("BWPredicted14dIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BWPredicted14dOut {
            get {
                return this.BWPredicted14dOutField;
            }
            set {
                if ((this.BWPredicted14dOutField.Equals(value) != true)) {
                    this.BWPredicted14dOutField = value;
                    this.RaisePropertyChanged("BWPredicted14dOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BWPredicted24hIn {
            get {
                return this.BWPredicted24hInField;
            }
            set {
                if ((this.BWPredicted24hInField.Equals(value) != true)) {
                    this.BWPredicted24hInField = value;
                    this.RaisePropertyChanged("BWPredicted24hIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BWPredicted24hOut {
            get {
                return this.BWPredicted24hOutField;
            }
            set {
                if ((this.BWPredicted24hOutField.Equals(value) != true)) {
                    this.BWPredicted24hOutField = value;
                    this.RaisePropertyChanged("BWPredicted24hOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BWSofarThisMonthIn {
            get {
                return this.BWSofarThisMonthInField;
            }
            set {
                if ((this.BWSofarThisMonthInField.Equals(value) != true)) {
                    this.BWSofarThisMonthInField = value;
                    this.RaisePropertyChanged("BWSofarThisMonthIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BWSofarThisMonthOut {
            get {
                return this.BWSofarThisMonthOutField;
            }
            set {
                if ((this.BWSofarThisMonthOutField.Equals(value) != true)) {
                    this.BWSofarThisMonthOutField = value;
                    this.RaisePropertyChanged("BWSofarThisMonthOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdated {
            get {
                return this.LastUpdatedField;
            }
            set {
                if ((this.LastUpdatedField.Equals(value) != true)) {
                    this.LastUpdatedField = value;
                    this.RaisePropertyChanged("LastUpdated");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlertInfo", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct AlertInfo : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AlertIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AlertOnFailureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AlertOnWarningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlertTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestinationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InitialDelayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RepeatDelayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AlertId {
            get {
                return this.AlertIdField;
            }
            set {
                if ((this.AlertIdField.Equals(value) != true)) {
                    this.AlertIdField = value;
                    this.RaisePropertyChanged("AlertId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AlertOnFailure {
            get {
                return this.AlertOnFailureField;
            }
            set {
                if ((this.AlertOnFailureField.Equals(value) != true)) {
                    this.AlertOnFailureField = value;
                    this.RaisePropertyChanged("AlertOnFailure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AlertOnWarning {
            get {
                return this.AlertOnWarningField;
            }
            set {
                if ((this.AlertOnWarningField.Equals(value) != true)) {
                    this.AlertOnWarningField = value;
                    this.RaisePropertyChanged("AlertOnWarning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlertType {
            get {
                return this.AlertTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.AlertTypeField, value) != true)) {
                    this.AlertTypeField = value;
                    this.RaisePropertyChanged("AlertType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Destination {
            get {
                return this.DestinationField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationField, value) != true)) {
                    this.DestinationField = value;
                    this.RaisePropertyChanged("Destination");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InitialDelay {
            get {
                return this.InitialDelayField;
            }
            set {
                if ((this.InitialDelayField.Equals(value) != true)) {
                    this.InitialDelayField = value;
                    this.RaisePropertyChanged("InitialDelay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RepeatDelay {
            get {
                return this.RepeatDelayField;
            }
            set {
                if ((this.RepeatDelayField.Equals(value) != true)) {
                    this.RepeatDelayField = value;
                    this.RaisePropertyChanged("RepeatDelay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceId {
            get {
                return this.ServiceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIdField, value) != true)) {
                    this.ServiceIdField = value;
                    this.RaisePropertyChanged("ServiceId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrentMonitorStatus", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct CurrentMonitorStatus : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastStatusChangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonitoredIpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusDetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestArg1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestTypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastStatusChange {
            get {
                return this.LastStatusChangeField;
            }
            set {
                if ((this.LastStatusChangeField.Equals(value) != true)) {
                    this.LastStatusChangeField = value;
                    this.RaisePropertyChanged("LastStatusChange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdated {
            get {
                return this.LastUpdatedField;
            }
            set {
                if ((this.LastUpdatedField.Equals(value) != true)) {
                    this.LastUpdatedField = value;
                    this.RaisePropertyChanged("LastUpdated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MonitoredIp {
            get {
                return this.MonitoredIpField;
            }
            set {
                if ((object.ReferenceEquals(this.MonitoredIpField, value) != true)) {
                    this.MonitoredIpField = value;
                    this.RaisePropertyChanged("MonitoredIp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceId {
            get {
                return this.ServiceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIdField, value) != true)) {
                    this.ServiceIdField = value;
                    this.RaisePropertyChanged("ServiceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusCode {
            get {
                return this.StatusCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusCodeField, value) != true)) {
                    this.StatusCodeField = value;
                    this.RaisePropertyChanged("StatusCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusDetail {
            get {
                return this.StatusDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusDetailField, value) != true)) {
                    this.StatusDetailField = value;
                    this.RaisePropertyChanged("StatusDetail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestArg1 {
            get {
                return this.TestArg1Field;
            }
            set {
                if ((object.ReferenceEquals(this.TestArg1Field, value) != true)) {
                    this.TestArg1Field = value;
                    this.RaisePropertyChanged("TestArg1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestId {
            get {
                return this.TestIdField;
            }
            set {
                if ((this.TestIdField.Equals(value) != true)) {
                    this.TestIdField = value;
                    this.RaisePropertyChanged("TestId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestName {
            get {
                return this.TestNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TestNameField, value) != true)) {
                    this.TestNameField = value;
                    this.RaisePropertyChanged("TestName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestType {
            get {
                return this.TestTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TestTypeField, value) != true)) {
                    this.TestTypeField = value;
                    this.RaisePropertyChanged("TestType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TestResult", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct TestResult : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusDetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceId {
            get {
                return this.ServiceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIdField, value) != true)) {
                    this.ServiceIdField = value;
                    this.RaisePropertyChanged("ServiceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusCode {
            get {
                return this.StatusCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusCodeField, value) != true)) {
                    this.StatusCodeField = value;
                    this.RaisePropertyChanged("StatusCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusDetail {
            get {
                return this.StatusDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusDetailField, value) != true)) {
                    this.StatusDetailField = value;
                    this.RaisePropertyChanged("StatusDetail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestId {
            get {
                return this.TestIdField;
            }
            set {
                if ((this.TestIdField.Equals(value) != true)) {
                    this.TestIdField = value;
                    this.RaisePropertyChanged("TestId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPRequestStatus", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct IPRequestStatus : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberRequestedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RejectReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequestIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberRequested {
            get {
                return this.NumberRequestedField;
            }
            set {
                if ((this.NumberRequestedField.Equals(value) != true)) {
                    this.NumberRequestedField = value;
                    this.RaisePropertyChanged("NumberRequested");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RejectReason {
            get {
                return this.RejectReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.RejectReasonField, value) != true)) {
                    this.RejectReasonField = value;
                    this.RaisePropertyChanged("RejectReason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequestId {
            get {
                return this.RequestIdField;
            }
            set {
                if ((this.RequestIdField.Equals(value) != true)) {
                    this.RequestIdField = value;
                    this.RaisePropertyChanged("RequestId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceId {
            get {
                return this.ServiceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIdField, value) != true)) {
                    this.ServiceIdField = value;
                    this.RaisePropertyChanged("ServiceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubnetType", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    public enum SubnetType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Public = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Private = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubnetInfo", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct SubnetInfo : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CIDRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] DNSServersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultGatewayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPrivateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IomartCodingChallenge.CodingChallengeServiceReference.IPPolicyType PolicyTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SubnetIDField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CIDR {
            get {
                return this.CIDRField;
            }
            set {
                if ((object.ReferenceEquals(this.CIDRField, value) != true)) {
                    this.CIDRField = value;
                    this.RaisePropertyChanged("CIDR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DNSServers {
            get {
                return this.DNSServersField;
            }
            set {
                if ((object.ReferenceEquals(this.DNSServersField, value) != true)) {
                    this.DNSServersField = value;
                    this.RaisePropertyChanged("DNSServers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultGateway {
            get {
                return this.DefaultGatewayField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultGatewayField, value) != true)) {
                    this.DefaultGatewayField = value;
                    this.RaisePropertyChanged("DefaultGateway");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPrivate {
            get {
                return this.IsPrivateField;
            }
            set {
                if ((this.IsPrivateField.Equals(value) != true)) {
                    this.IsPrivateField = value;
                    this.RaisePropertyChanged("IsPrivate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IomartCodingChallenge.CodingChallengeServiceReference.IPPolicyType PolicyType {
            get {
                return this.PolicyTypeField;
            }
            set {
                if ((this.PolicyTypeField.Equals(value) != true)) {
                    this.PolicyTypeField = value;
                    this.RaisePropertyChanged("PolicyType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SubnetID {
            get {
                return this.SubnetIDField;
            }
            set {
                if ((this.SubnetIDField.Equals(value) != true)) {
                    this.SubnetIDField = value;
                    this.RaisePropertyChanged("SubnetID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPPolicyType", Namespace="http://schemas.datacontract.org/2004/07/RapidSwitch.MyServersApi")]
    public enum IPPolicyType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ignore = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WarnOnly = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AutoSuspend = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AutoSuspendUnlessSameClient = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DelayedAutoReassign = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AutoReassign = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HostedDomainInfo", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct HostedDomainInfo : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AllowedTransferListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AuthorityStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DefaultTTLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DomainIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExpiryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostingTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimaryNSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SecondaryTransferStatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AllowedTransferList {
            get {
                return this.AllowedTransferListField;
            }
            set {
                if ((object.ReferenceEquals(this.AllowedTransferListField, value) != true)) {
                    this.AllowedTransferListField = value;
                    this.RaisePropertyChanged("AllowedTransferList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AuthorityStatus {
            get {
                return this.AuthorityStatusField;
            }
            set {
                if ((this.AuthorityStatusField.Equals(value) != true)) {
                    this.AuthorityStatusField = value;
                    this.RaisePropertyChanged("AuthorityStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DefaultTTL {
            get {
                return this.DefaultTTLField;
            }
            set {
                if ((this.DefaultTTLField.Equals(value) != true)) {
                    this.DefaultTTLField = value;
                    this.RaisePropertyChanged("DefaultTTL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DomainId {
            get {
                return this.DomainIdField;
            }
            set {
                if ((this.DomainIdField.Equals(value) != true)) {
                    this.DomainIdField = value;
                    this.RaisePropertyChanged("DomainId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DomainName {
            get {
                return this.DomainNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainNameField, value) != true)) {
                    this.DomainNameField = value;
                    this.RaisePropertyChanged("DomainName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExpiryDate {
            get {
                return this.ExpiryDateField;
            }
            set {
                if ((this.ExpiryDateField.Equals(value) != true)) {
                    this.ExpiryDateField = value;
                    this.RaisePropertyChanged("ExpiryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostingType {
            get {
                return this.HostingTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.HostingTypeField, value) != true)) {
                    this.HostingTypeField = value;
                    this.RaisePropertyChanged("HostingType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrimaryNS {
            get {
                return this.PrimaryNSField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryNSField, value) != true)) {
                    this.PrimaryNSField = value;
                    this.RaisePropertyChanged("PrimaryNS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SecondaryTransferStatus {
            get {
                return this.SecondaryTransferStatusField;
            }
            set {
                if ((this.SecondaryTransferStatusField.Equals(value) != true)) {
                    this.SecondaryTransferStatusField = value;
                    this.RaisePropertyChanged("SecondaryTransferStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HostedDomainRecord", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct HostedDomainRecord : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RecordDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RecordIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecordTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TTLField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] RecordData {
            get {
                return this.RecordDataField;
            }
            set {
                if ((object.ReferenceEquals(this.RecordDataField, value) != true)) {
                    this.RecordDataField = value;
                    this.RaisePropertyChanged("RecordData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RecordId {
            get {
                return this.RecordIdField;
            }
            set {
                if ((this.RecordIdField.Equals(value) != true)) {
                    this.RecordIdField = value;
                    this.RaisePropertyChanged("RecordId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RecordType {
            get {
                return this.RecordTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.RecordTypeField, value) != true)) {
                    this.RecordTypeField = value;
                    this.RaisePropertyChanged("RecordType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TTL {
            get {
                return this.TTLField;
            }
            set {
                if ((this.TTLField.Equals(value) != true)) {
                    this.TTLField = value;
                    this.RaisePropertyChanged("TTL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DomainContact", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct DomainContact : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DomainContactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ForenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TelephoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DomainContactId {
            get {
                return this.DomainContactIdField;
            }
            set {
                if ((this.DomainContactIdField.Equals(value) != true)) {
                    this.DomainContactIdField = value;
                    this.RaisePropertyChanged("DomainContactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Forename {
            get {
                return this.ForenameField;
            }
            set {
                if ((object.ReferenceEquals(this.ForenameField, value) != true)) {
                    this.ForenameField = value;
                    this.RaisePropertyChanged("Forename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string MiddleName {
            get {
                return this.MiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleNameField, value) != true)) {
                    this.MiddleNameField = value;
                    this.RaisePropertyChanged("MiddleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string Telephone {
            get {
                return this.TelephoneField;
            }
            set {
                if ((object.ReferenceEquals(this.TelephoneField, value) != true)) {
                    this.TelephoneField = value;
                    this.RaisePropertyChanged("Telephone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string Fax {
            get {
                return this.FaxField;
            }
            set {
                if ((object.ReferenceEquals(this.FaxField, value) != true)) {
                    this.FaxField = value;
                    this.RaisePropertyChanged("Fax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public string Address1 {
            get {
                return this.Address1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address1Field, value) != true)) {
                    this.Address1Field = value;
                    this.RaisePropertyChanged("Address1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public string Address2 {
            get {
                return this.Address2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address2Field, value) != true)) {
                    this.Address2Field = value;
                    this.RaisePropertyChanged("Address2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public string Address3 {
            get {
                return this.Address3Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address3Field, value) != true)) {
                    this.Address3Field = value;
                    this.RaisePropertyChanged("Address3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public string Town {
            get {
                return this.TownField;
            }
            set {
                if ((object.ReferenceEquals(this.TownField, value) != true)) {
                    this.TownField = value;
                    this.RaisePropertyChanged("Town");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public string County {
            get {
                return this.CountyField;
            }
            set {
                if ((object.ReferenceEquals(this.CountyField, value) != true)) {
                    this.CountyField = value;
                    this.RaisePropertyChanged("County");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=14)]
        public string PostCode {
            get {
                return this.PostCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PostCodeField, value) != true)) {
                    this.PostCodeField = value;
                    this.RaisePropertyChanged("PostCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=15)]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DomainAvailability", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct DomainAvailability : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TLDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAvailableField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DomainName {
            get {
                return this.DomainNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainNameField, value) != true)) {
                    this.DomainNameField = value;
                    this.RaisePropertyChanged("DomainName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TLD {
            get {
                return this.TLDField;
            }
            set {
                if ((object.ReferenceEquals(this.TLDField, value) != true)) {
                    this.TLDField = value;
                    this.RaisePropertyChanged("TLD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public bool IsAvailable {
            get {
                return this.IsAvailableField;
            }
            set {
                if ((this.IsAvailableField.Equals(value) != true)) {
                    this.IsAvailableField = value;
                    this.RaisePropertyChanged("IsAvailable");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TopLevelDomain", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct TopLevelDomain : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TLDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CostField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TLD {
            get {
                return this.TLDField;
            }
            set {
                if ((object.ReferenceEquals(this.TLDField, value) != true)) {
                    this.TLDField = value;
                    this.RaisePropertyChanged("TLD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int MinPeriod {
            get {
                return this.MinPeriodField;
            }
            set {
                if ((this.MinPeriodField.Equals(value) != true)) {
                    this.MinPeriodField = value;
                    this.RaisePropertyChanged("MinPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public int MaxPeriod {
            get {
                return this.MaxPeriodField;
            }
            set {
                if ((this.MaxPeriodField.Equals(value) != true)) {
                    this.MaxPeriodField = value;
                    this.RaisePropertyChanged("MaxPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public decimal Cost {
            get {
                return this.CostField;
            }
            set {
                if ((this.CostField.Equals(value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvoiceHeader", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct InvoiceHeader : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InvoiceNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PaidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SubTotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TaxDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TermsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal VATTotalField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DueDate {
            get {
                return this.DueDateField;
            }
            set {
                if ((this.DueDateField.Equals(value) != true)) {
                    this.DueDateField = value;
                    this.RaisePropertyChanged("DueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InvoiceNo {
            get {
                return this.InvoiceNoField;
            }
            set {
                if ((object.ReferenceEquals(this.InvoiceNoField, value) != true)) {
                    this.InvoiceNoField = value;
                    this.RaisePropertyChanged("InvoiceNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Paid {
            get {
                return this.PaidField;
            }
            set {
                if ((this.PaidField.Equals(value) != true)) {
                    this.PaidField = value;
                    this.RaisePropertyChanged("Paid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SubTotal {
            get {
                return this.SubTotalField;
            }
            set {
                if ((this.SubTotalField.Equals(value) != true)) {
                    this.SubTotalField = value;
                    this.RaisePropertyChanged("SubTotal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TaxDate {
            get {
                return this.TaxDateField;
            }
            set {
                if ((this.TaxDateField.Equals(value) != true)) {
                    this.TaxDateField = value;
                    this.RaisePropertyChanged("TaxDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Terms {
            get {
                return this.TermsField;
            }
            set {
                if ((object.ReferenceEquals(this.TermsField, value) != true)) {
                    this.TermsField = value;
                    this.RaisePropertyChanged("Terms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal VATTotal {
            get {
                return this.VATTotalField;
            }
            set {
                if ((this.VATTotalField.Equals(value) != true)) {
                    this.VATTotalField = value;
                    this.RaisePropertyChanged("VATTotal");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvoiceItem", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct InvoiceItem : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimaryIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal RateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal VATAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal VATRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string YourServerRefField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Detail {
            get {
                return this.DetailField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailField, value) != true)) {
                    this.DetailField = value;
                    this.RaisePropertyChanged("Detail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrimaryIP {
            get {
                return this.PrimaryIPField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryIPField, value) != true)) {
                    this.PrimaryIPField = value;
                    this.RaisePropertyChanged("PrimaryIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Rate {
            get {
                return this.RateField;
            }
            set {
                if ((this.RateField.Equals(value) != true)) {
                    this.RateField = value;
                    this.RaisePropertyChanged("Rate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceID {
            get {
                return this.ServiceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceIDField, value) != true)) {
                    this.ServiceIDField = value;
                    this.RaisePropertyChanged("ServiceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryField, value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal VATAmount {
            get {
                return this.VATAmountField;
            }
            set {
                if ((this.VATAmountField.Equals(value) != true)) {
                    this.VATAmountField = value;
                    this.RaisePropertyChanged("VATAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal VATRate {
            get {
                return this.VATRateField;
            }
            set {
                if ((this.VATRateField.Equals(value) != true)) {
                    this.VATRateField = value;
                    this.RaisePropertyChanged("VATRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string YourServerRef {
            get {
                return this.YourServerRefField;
            }
            set {
                if ((object.ReferenceEquals(this.YourServerRefField, value) != true)) {
                    this.YourServerRefField = value;
                    this.RaisePropertyChanged("YourServerRef");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountSummary", Namespace="http://rapidswitch.com/services/MyServersApi")]
    [System.SerializableAttribute()]
    public partial struct AccountSummary : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal NextPaymentAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime NextPaymentDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OverdueInvoicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnpaidInvoicesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal NextPaymentAmount {
            get {
                return this.NextPaymentAmountField;
            }
            set {
                if ((this.NextPaymentAmountField.Equals(value) != true)) {
                    this.NextPaymentAmountField = value;
                    this.RaisePropertyChanged("NextPaymentAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime NextPaymentDate {
            get {
                return this.NextPaymentDateField;
            }
            set {
                if ((this.NextPaymentDateField.Equals(value) != true)) {
                    this.NextPaymentDateField = value;
                    this.RaisePropertyChanged("NextPaymentDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OverdueInvoices {
            get {
                return this.OverdueInvoicesField;
            }
            set {
                if ((this.OverdueInvoicesField.Equals(value) != true)) {
                    this.OverdueInvoicesField = value;
                    this.RaisePropertyChanged("OverdueInvoices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnpaidInvoices {
            get {
                return this.UnpaidInvoicesField;
            }
            set {
                if ((this.UnpaidInvoicesField.Equals(value) != true)) {
                    this.UnpaidInvoicesField = value;
                    this.RaisePropertyChanged("UnpaidInvoices");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://rapidswitch.com/services/MyServersApi", ConfigurationName="CodingChallengeServiceReference.IMyServersApi")]
    public interface IMyServersApi {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetUnreadMessages", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetUnreadMessagesRespo" +
            "nse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Message[] GetUnreadMessages(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetMessageCount", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetMessageCountRespons" +
            "e")]
        int GetMessageCount(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllMessages", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllMessagesResponse" +
            "")]
        IomartCodingChallenge.CodingChallengeServiceReference.Message[] GetAllMessages(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetMessage", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetMessageResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Message GetMessage(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int messageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/MarkMessageAsRead", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/MarkMessageAsReadRespo" +
            "nse")]
        void MarkMessageAsRead(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int messageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerCredentials", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerCredentialsRe" +
            "sponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ServerCredential[] GetServerCredentials(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.ServerCredentialType type, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/WriteServerCredential", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/WriteServerCredentialR" +
            "esponse")]
        void WriteServerCredential(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.ServerCredential cred);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveServerCredential" +
            "", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveServerCredential" +
            "Response")]
        void RemoveServerCredential(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, IomartCodingChallenge.CodingChallengeServiceReference.ServerCredentialType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductType", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductTypeResponse" +
            "")]
        IomartCodingChallenge.CodingChallengeServiceReference.ProductType GetProductType(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductTypes", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductTypesRespons" +
            "e")]
        IomartCodingChallenge.CodingChallengeServiceReference.ProductType[] GetProductTypes(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProduct", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Product GetProduct(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid productGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProducts", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductsResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Product[] GetProducts(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string productType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductInfoFields", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductInfoFieldsRe" +
            "sponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ProductInfoField[] GetProductInfoFields(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string productType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductRules", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductRulesRespons" +
            "e")]
        IomartCodingChallenge.CodingChallengeServiceReference.ProductRule[] GetProductRules(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string productType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductOptionsByTyp" +
            "e", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductOptionsByTyp" +
            "eResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ProductOptionGroup[] GetProductOptionsByType(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string productType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductOptionsByID", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductOptionsByIDR" +
            "esponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ProductOptionGroup[] GetProductOptionsByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid productGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductOptions", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetProductOptionsRespo" +
            "nse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ProductOption[] GetProductOptions(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid productGuid, System.Guid optionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllChassisForSale", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllChassisForSaleRe" +
            "sponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ChassisForSale[] GetAllChassisForSale(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllChassisForSaleBy" +
            "Type", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllChassisForSaleBy" +
            "TypeResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ChassisForSale[] GetAllChassisForSaleByType(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, string search, IomartCodingChallenge.CodingChallengeServiceReference.ChassisForSaleType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetChassisForSale", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetChassisForSaleRespo" +
            "nse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ChassisForSale GetChassisForSale(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid chassisGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllChassisGroups", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllChassisGroupsRes" +
            "ponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ChassisGroup[] GetAllChassisGroups(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllReservedChassisG" +
            "roups", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllReservedChassisG" +
            "roupsResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ChassisGroup[] GetAllReservedChassisGroups(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllReservedChassisG" +
            "roupsForClient", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllReservedChassisG" +
            "roupsForClientResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ChassisGroup[] GetAllReservedChassisGroupsForClient(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int clientId, string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetChassisGroup", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetChassisGroupRespons" +
            "e")]
        IomartCodingChallenge.CodingChallengeServiceReference.ChassisGroup GetChassisGroup(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetNextChassisFromGrou" +
            "p", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetNextChassisFromGrou" +
            "pResponse")]
        System.Guid GetNextChassisFromGroup(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid chassisGroupGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RefreshBMCache", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RefreshBMCacheResponse" +
            "")]
        void RefreshBMCache(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetBasket", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetBasketResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Basket GetBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/IsBasketLocked", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/IsBasketLockedResponse" +
            "")]
        bool IsBasketLocked(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetBasketsByEmail", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetBasketsByEmailRespo" +
            "nse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Basket[] GetBasketsByEmail(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetBasketItem", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetBasketItemResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.BasketItem GetBasketItem(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, System.Guid itemGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CalcCosts", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CalcCostsResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Cost CalcCosts(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid productGuid, IomartCodingChallenge.CodingChallengeServiceReference.BasketItemOption[] options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/DeleteBasketByID", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/DeleteBasketByIDRespon" +
            "se")]
        void DeleteBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/DeleteBasket", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/DeleteBasketResponse")]
        void DeleteBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/EmptyBasketByID", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/EmptyBasketByIDRespons" +
            "e")]
        void EmptyBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/EmptyBasket", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/EmptyBasketResponse")]
        void EmptyBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CreateBasket", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CreateBasketResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Basket CreateBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CreateBasketByID", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CreateBasketByIDRespon" +
            "se")]
        IomartCodingChallenge.CodingChallengeServiceReference.Basket CreateBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string email, string remoteIP, string userAgent, string referer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddItemToBasketByID", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddItemToBasketByIDRes" +
            "ponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Basket AddItemToBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, string descn, System.Guid productGuid, int quantity, string ipToInstallOn, string notes, IomartCodingChallenge.CodingChallengeServiceReference.BasketItemOption[] options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddItemToBasket", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddItemToBasketRespons" +
            "e")]
        IomartCodingChallenge.CodingChallengeServiceReference.Basket AddItemToBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket, IomartCodingChallenge.CodingChallengeServiceReference.BasketItem item, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/UpdateBasketItemByID", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/UpdateBasketItemByIDRe" +
            "sponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Basket UpdateBasketItemByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, System.Guid itemGuid, int quantity, string ipToInstallOn, string notes, IomartCodingChallenge.CodingChallengeServiceReference.BasketItemOption[] options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/UpdateBasketItem", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/UpdateBasketItemRespon" +
            "se")]
        IomartCodingChallenge.CodingChallengeServiceReference.Basket UpdateBasketItem(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket, IomartCodingChallenge.CodingChallengeServiceReference.BasketItem item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveItemFromBasketBy" +
            "ID", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveItemFromBasketBy" +
            "IDResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Basket RemoveItemFromBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, System.Guid itemGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveItemFromBasket", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveItemFromBasketRe" +
            "sponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Basket RemoveItemFromBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket, IomartCodingChallenge.CodingChallengeServiceReference.BasketItem item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ValidateBasketByID", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ValidateBasketByIDResp" +
            "onse")]
        string[] ValidateBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ValidateBasket", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ValidateBasketResponse" +
            "")]
        string[] ValidateBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ValidateBasketItemByID" +
            "", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ValidateBasketItemByID" +
            "Response")]
        string[] ValidateBasketItemByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, System.Guid itemGuid, System.Guid productGuid, IomartCodingChallenge.CodingChallengeServiceReference.BasketItemOption[] options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ValidateBasketItem", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ValidateBasketItemResp" +
            "onse")]
        string[] ValidateBasketItem(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket, IomartCodingChallenge.CodingChallengeServiceReference.BasketItem basketItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ChangeBillingPeriod", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ChangeBillingPeriodRes" +
            "ponse")]
        void ChangeBillingPeriod(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, IomartCodingChallenge.CodingChallengeServiceReference.BillingPeriod billingPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/OrderBasketByID", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/OrderBasketByIDRespons" +
            "e")]
        IomartCodingChallenge.CodingChallengeServiceReference.Order OrderBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, IomartCodingChallenge.CodingChallengeServiceReference.BillingPeriod billingPeriod, string privateRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/OrderBasket", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/OrderBasketResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Order OrderBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket, string privateRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ChangeQuantityByID", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ChangeQuantityByIDResp" +
            "onse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Basket ChangeQuantityByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, System.Guid itemGuid, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ChangeQuantity", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ChangeQuantityResponse" +
            "")]
        IomartCodingChallenge.CodingChallengeServiceReference.Basket ChangeQuantity(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket, IomartCodingChallenge.CodingChallengeServiceReference.BasketItem item, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetOrder", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetOrderResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Order GetOrder(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string orderRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetOrderByPrivateRef", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetOrderByPrivateRefRe" +
            "sponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Order[] GetOrderByPrivateRef(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string privateRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllPendingOrders", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllPendingOrdersRes" +
            "ponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Order[] GetAllPendingOrders(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllCompletedOrders", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllCompletedOrdersR" +
            "esponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Order[] GetAllCompletedOrders(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllCancelledOrders", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllCancelledOrdersR" +
            "esponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Order[] GetAllCancelledOrders(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetFAQ", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetFAQResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.FAQ GetFAQ(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllSections", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllSectionsResponse" +
            "")]
        IomartCodingChallenge.CodingChallengeServiceReference.FAQSection[] GetAllSections(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllQuestions", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllQuestionsRespons" +
            "e")]
        IomartCodingChallenge.CodingChallengeServiceReference.FAQQuestion[] GetAllQuestions(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int sectionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetSection", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetSectionResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.FAQSection GetSection(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int sectionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetQuestion", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetQuestionResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.FAQQuestion GetQuestion(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int questionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddNullRoute", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddNullRouteResponse")]
        void AddNullRoute(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ipAddress, string reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ClearNullRoute", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ClearNullRouteResponse" +
            "")]
        void ClearNullRoute(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetActiveNullRoutes", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetActiveNullRoutesRes" +
            "ponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.NullRoute[] GetActiveNullRoutes(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/WriteIPSafeList", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/WriteIPSafeListRespons" +
            "e")]
        void WriteIPSafeList(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ipAddress, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/DeleteIPSafeList", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/DeleteIPSafeListRespon" +
            "se")]
        void DeleteIPSafeList(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetIPSafeList", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetIPSafeListResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.IPSafeListEntry[] GetIPSafeList(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetLicences", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetLicencesResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.Licence[] GetLicences(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddLicence", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddLicenceResponse")]
        void AddLicence(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, IomartCodingChallenge.CodingChallengeServiceReference.LicenceType type, string licenceIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetLicenceTypes", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetLicenceTypesRespons" +
            "e")]
        IomartCodingChallenge.CodingChallengeServiceReference.AvailableLicenceType[] GetLicenceTypes(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveLicenceByIPAddre" +
            "ss", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveLicenceByIPAddre" +
            "ssResponse")]
        void RemoveLicenceByIPAddress(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, IomartCodingChallenge.CodingChallengeServiceReference.LicenceType type, string licenceIPAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveLicenceByProvide" +
            "rReference", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveLicenceByProvide" +
            "rReferenceResponse")]
        void RemoveLicenceByProviderReference(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, string providerReference);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AreCredentialsValid", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AreCredentialsValidRes" +
            "ponse")]
        bool AreCredentialsValid(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetClientInfo", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetClientInfoResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ClientInfo GetClientInfo(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAvailableIPs", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAvailableIPsRespons" +
            "e")]
        string[] GetAvailableIPs(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid clientGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerCount", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerCountResponse" +
            "")]
        int GetServerCount(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllServerIDs", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllServerIDsRespons" +
            "e")]
        string[] GetAllServerIDs(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerByIPAddress", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerByIPAddressRe" +
            "sponse")]
        string GetServerByIPAddress(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerDetails", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerDetailsRespon" +
            "se")]
        IomartCodingChallenge.CodingChallengeServiceReference.ServerInfo GetServerDetails(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllServerDetails", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllServerDetailsRes" +
            "ponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ServerInfo[] GetAllServerDetails(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/SearchServers", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/SearchServersResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ServerInfo[] SearchServers(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.ServerStatusSearch[] status, IomartCodingChallenge.CodingChallengeServiceReference.ServerServiceTypeSearch[] serviceType, IomartCodingChallenge.CodingChallengeServiceReference.ServerDeviceTypeSearch[] deviceType, string filter, bool showIPs, bool showComponents, bool showReverseDNS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllCurrentServers", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllCurrentServersRe" +
            "sponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ServerInfo[] GetAllCurrentServers(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerNICs", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerNICsResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.NICInfo[] GetServerNICs(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/LookupIP", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/LookupIPResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.IPInfo LookupIP(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/LookupPrivateIP", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/LookupPrivateIPRespons" +
            "e")]
        IomartCodingChallenge.CodingChallengeServiceReference.IPInfo LookupPrivateIP(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ip, System.Nullable<int> subnetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/PowerCycleServer", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/PowerCycleServerRespon" +
            "se")]
        IomartCodingChallenge.CodingChallengeServiceReference.RequestStatus PowerCycleServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetRemainingKvmCount", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetRemainingKvmCountRe" +
            "sponse")]
        int GetRemainingKvmCount(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetRemainingRecoverySe" +
            "ssionCount", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetRemainingRecoverySe" +
            "ssionCountResponse")]
        int GetRemainingRecoverySessionCount(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RequestKvm", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RequestKvmResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.RequestStatus RequestKvm(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RequestRecoverySession" +
            "", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RequestRecoverySession" +
            "Response")]
        IomartCodingChallenge.CodingChallengeServiceReference.RequestStatus RequestRecoverySession(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetRequestStatusUpdate" +
            "", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetRequestStatusUpdate" +
            "Response")]
        IomartCodingChallenge.CodingChallengeServiceReference.RequestStatus GetRequestStatusUpdate(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int requestid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllRequestStatusUpd" +
            "ate", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllRequestStatusUpd" +
            "ateResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.RequestStatus[] GetAllRequestStatusUpdate(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.RequestStatusSearch search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetSessionDetails", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetSessionDetailsRespo" +
            "nse")]
        IomartCodingChallenge.CodingChallengeServiceReference.RecoverySessionDetails GetSessionDetails(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int requestid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/SetRecoveryMode", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/SetRecoveryModeRespons" +
            "e")]
        void SetRecoveryMode(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, bool recoverymode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/SetYourServerRef", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/SetYourServerRefRespon" +
            "se")]
        void SetYourServerRef(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, string yourServerRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CancelRequest", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CancelRequestResponse")]
        void CancelRequest(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int requestid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/TerminateKVM", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/TerminateKVMResponse")]
        void TerminateKVM(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int requestid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CancelServer", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CancelServerResponse")]
        void CancelServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, System.DateTime cancellationDate, IomartCodingChallenge.CodingChallengeServiceReference.CancellationReason reason, string details, string comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/UncancelServer", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/UncancelServerResponse" +
            "")]
        void UncancelServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/SuspendServer", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/SuspendServerResponse")]
        void SuspendServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, string reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/UnsuspendServer", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/UnsuspendServerRespons" +
            "e")]
        void UnsuspendServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetReverseDnsEntries", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetReverseDnsEntriesRe" +
            "sponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.ReverseDnsEntry[] GetReverseDnsEntries(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetReverseDnsEntry", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetReverseDnsEntryResp" +
            "onse")]
        string GetReverseDnsEntry(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/SetReverseDnsEntry", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/SetReverseDnsEntryResp" +
            "onse")]
        void SetReverseDnsEntry(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ip, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetMonthlyBandwidthRep" +
            "ort", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetMonthlyBandwidthRep" +
            "ortResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.MonthlyBandwidthReportEntry[] GetMonthlyBandwidthReport(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, bool external);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerBandwidthRepo" +
            "rt", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerBandwidthRepo" +
            "rtResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.BandwidthReport GetServerBandwidthReport(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, bool external);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAlerts", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAlertsResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.AlertInfo[] GetAlerts(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddAlert", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddAlertResponse")]
        int AddAlert(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, string alertType, string dest, System.Nullable<int> initDelay, System.Nullable<int> repeatDelay, System.Nullable<bool> alertOnWarn, System.Nullable<bool> alertOnFail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveAlert", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveAlertResponse")]
        void RemoveAlert(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, int alertId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllTestIDs", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllTestIDsResponse")]
        int[] GetAllTestIDs(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerStatus", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetServerStatusRespons" +
            "e")]
        IomartCodingChallenge.CodingChallengeServiceReference.CurrentMonitorStatus[] GetServerStatus(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetMultipleServerStatu" +
            "s", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetMultipleServerStatu" +
            "sResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.CurrentMonitorStatus[] GetMultipleServerStatus(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string[] serviceIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllServerIssues", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllServerIssuesResp" +
            "onse")]
        IomartCodingChallenge.CodingChallengeServiceReference.CurrentMonitorStatus[] GetAllServerIssues(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllServerIssues2", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllServerIssues2Res" +
            "ponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.CurrentMonitorStatus[] GetAllServerIssues2(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetTestHistory", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetTestHistoryResponse" +
            "")]
        IomartCodingChallenge.CodingChallengeServiceReference.TestResult[] GetTestHistory(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, int testId, int rows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetMultipleTestResults" +
            "", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetMultipleTestResults" +
            "Response")]
        IomartCodingChallenge.CodingChallengeServiceReference.TestResult[] GetMultipleTestResults(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int[] testIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetTestTypes", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetTestTypesResponse")]
        string[] GetTestTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddTest", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddTestResponse")]
        int AddTest(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, string testType, string ip, string arg1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveTest", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveTestResponse")]
        void RemoveTest(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, int testId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RequestIPs", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RequestIPsResponse")]
        int RequestIPs(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, int number, string reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetIPRequestStatus", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetIPRequestStatusResp" +
            "onse")]
        IomartCodingChallenge.CodingChallengeServiceReference.IPRequestStatus GetIPRequestStatus(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, int requestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetSubnets", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetSubnetsResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo[] GetSubnets(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.SubnetType type, string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetSubnet", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetSubnetResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo GetSubnet(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int subnetid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CreateQuickSubnet", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CreateQuickSubnetRespo" +
            "nse")]
        IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo CreateQuickSubnet(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string cidrstring);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CreateSubnet", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CreateSubnetResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo CreateSubnet(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo si);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ChangeSubnet", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/ChangeSubnetResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo ChangeSubnet(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo subnet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/DeleteSubnet", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/DeleteSubnetResponse")]
        void DeleteSubnet(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int subnetid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetIPAddressesForSubne" +
            "t", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetIPAddressesForSubne" +
            "tResponse")]
        string[] GetIPAddressesForSubnet(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int subnetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AssignIPToServer", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AssignIPToServerRespon" +
            "se")]
        void AssignIPToServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int subnetid, string ipaddr, int nicid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveIPFromServer", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RemoveIPFromServerResp" +
            "onse")]
        void RemoveIPFromServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int subnetid, string ipaddr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetDomainCount", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetDomainCountResponse" +
            "")]
        int GetDomainCount(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetForwardDnsDomains", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetForwardDnsDomainsRe" +
            "sponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.HostedDomainInfo[] GetForwardDnsDomains(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetForwardDnsDomain", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetForwardDnsDomainRes" +
            "ponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.HostedDomainInfo GetForwardDnsDomain(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddForwardDnsDomain", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddForwardDnsDomainRes" +
            "ponse")]
        int AddForwardDnsDomain(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string domainName, string hostingType, string primaryNS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/DeleteForwardDnsDomain" +
            "", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/DeleteForwardDnsDomain" +
            "Response")]
        void DeleteForwardDnsDomain(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/UpdateDomainHostingSet" +
            "tings", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/UpdateDomainHostingSet" +
            "tingsResponse")]
        void UpdateDomainHostingSettings(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string hostingType, string primaryNS, string allowedTransferList, System.Nullable<int> defaultTTL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetForwardDnsEntries", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetForwardDnsEntriesRe" +
            "sponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.HostedDomainRecord[] GetForwardDnsEntries(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/DeleteForwardDnsEntry", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/DeleteForwardDnsEntryR" +
            "esponse")]
        void DeleteForwardDnsEntry(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, int recordId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsARecord", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsARecordResponse")]
        void AddDnsARecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string recordName, string ip, System.Nullable<int> ttl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsAAAARecord", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsAAAARecordRespon" +
            "se")]
        void AddDnsAAAARecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string recordName, string ip, System.Nullable<int> ttl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsCNAMERecord", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsCNAMERecordRespo" +
            "nse")]
        void AddDnsCNAMERecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string recordName, string destination, System.Nullable<int> ttl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsMXRecord", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsMXRecordResponse" +
            "")]
        void AddDnsMXRecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string mailServer, int priority, string subDomain, System.Nullable<int> ttl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsNSRecord", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsNSRecordResponse" +
            "")]
        void AddDnsNSRecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string hostName, string subDomain, System.Nullable<int> ttl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsSRVRecord", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsSRVRecordRespons" +
            "e")]
        void AddDnsSRVRecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string serviceName, int priority, int weight, int port, string hostName, System.Nullable<int> ttl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsTXTRecord", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsTXTRecordRespons" +
            "e")]
        void AddDnsTXTRecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string recordName, string data, System.Nullable<int> ttl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsSPFRecord", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/AddDnsSPFRecordRespons" +
            "e")]
        void AddDnsSPFRecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string subDomain, string spfData, System.Nullable<int> ttl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetDomainContacts", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetDomainContactsRespo" +
            "nse")]
        IomartCodingChallenge.CodingChallengeServiceReference.DomainContact[] GetDomainContacts(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CheckDomainAvailabilit" +
            "y", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CheckDomainAvailabilit" +
            "yResponse")]
        bool CheckDomainAvailability(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CheckMultipleDomainsAv" +
            "ailability", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/CheckMultipleDomainsAv" +
            "ailabilityResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.DomainAvailability[] CheckMultipleDomainsAvailability(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string[] domainNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllTLDs", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAllTLDsResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.TopLevelDomain[] GetAllTLDs(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RegisterDomain", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RegisterDomainResponse" +
            "")]
        string RegisterDomain(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string domainName, int years, int techContactId, int adminContactId, int ownerContactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RegisterDomains", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/RegisterDomainsRespons" +
            "e")]
        string RegisterDomains(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string[] domainNames, int years, int techContactId, int adminContactId, int ownerContactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetInvoiceHeaders", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetInvoiceHeadersRespo" +
            "nse")]
        IomartCodingChallenge.CodingChallengeServiceReference.InvoiceHeader[] GetInvoiceHeaders(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetInvoiceItems", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetInvoiceItemsRespons" +
            "e")]
        IomartCodingChallenge.CodingChallengeServiceReference.InvoiceItem[] GetInvoiceItems(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string invoiceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetInvoiceItemsByServe" +
            "r", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetInvoiceItemsByServe" +
            "rResponse")]
        IomartCodingChallenge.CodingChallengeServiceReference.InvoiceItem[] GetInvoiceItemsByServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string invoiceNo, string serviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAccountSummary", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetAccountSummaryRespo" +
            "nse")]
        IomartCodingChallenge.CodingChallengeServiceReference.AccountSummary GetAccountSummary(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetUnreadMessageCount", ReplyAction="http://rapidswitch.com/services/MyServersApi/IMyServersApi/GetUnreadMessageCountR" +
            "esponse")]
        int GetUnreadMessageCount(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyServersApiChannel : IomartCodingChallenge.CodingChallengeServiceReference.IMyServersApi, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyServersApiClient : System.ServiceModel.ClientBase<IomartCodingChallenge.CodingChallengeServiceReference.IMyServersApi>, IomartCodingChallenge.CodingChallengeServiceReference.IMyServersApi {
        
        public MyServersApiClient() {
        }
        
        public MyServersApiClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyServersApiClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServersApiClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServersApiClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Message[] GetUnreadMessages(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetUnreadMessages(authInfo);
        }
        
        public int GetMessageCount(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetMessageCount(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Message[] GetAllMessages(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetAllMessages(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Message GetMessage(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int messageID) {
            return base.Channel.GetMessage(authInfo, messageID);
        }
        
        public void MarkMessageAsRead(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int messageID) {
            base.Channel.MarkMessageAsRead(authInfo, messageID);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ServerCredential[] GetServerCredentials(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.ServerCredentialType type, string serviceId) {
            return base.Channel.GetServerCredentials(authInfo, type, serviceId);
        }
        
        public void WriteServerCredential(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.ServerCredential cred) {
            base.Channel.WriteServerCredential(authInfo, cred);
        }
        
        public void RemoveServerCredential(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, IomartCodingChallenge.CodingChallengeServiceReference.ServerCredentialType type) {
            base.Channel.RemoveServerCredential(authInfo, serviceId, type);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ProductType GetProductType(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string code) {
            return base.Channel.GetProductType(authInfo, code);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ProductType[] GetProductTypes(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetProductTypes(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Product GetProduct(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid productGuid) {
            return base.Channel.GetProduct(authInfo, productGuid);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Product[] GetProducts(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string productType) {
            return base.Channel.GetProducts(authInfo, productType);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ProductInfoField[] GetProductInfoFields(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string productType) {
            return base.Channel.GetProductInfoFields(authInfo, productType);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ProductRule[] GetProductRules(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string productType) {
            return base.Channel.GetProductRules(authInfo, productType);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ProductOptionGroup[] GetProductOptionsByType(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string productType) {
            return base.Channel.GetProductOptionsByType(authInfo, productType);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ProductOptionGroup[] GetProductOptionsByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid productGuid) {
            return base.Channel.GetProductOptionsByID(authInfo, productGuid);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ProductOption[] GetProductOptions(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid productGuid, System.Guid optionGuid) {
            return base.Channel.GetProductOptions(authInfo, productGuid, optionGuid);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ChassisForSale[] GetAllChassisForSale(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, string search) {
            return base.Channel.GetAllChassisForSale(authInfo, basketGuid, search);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ChassisForSale[] GetAllChassisForSaleByType(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, string search, IomartCodingChallenge.CodingChallengeServiceReference.ChassisForSaleType type) {
            return base.Channel.GetAllChassisForSaleByType(authInfo, basketGuid, search, type);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ChassisForSale GetChassisForSale(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid chassisGuid) {
            return base.Channel.GetChassisForSale(authInfo, chassisGuid);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ChassisGroup[] GetAllChassisGroups(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string search) {
            return base.Channel.GetAllChassisGroups(authInfo, search);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ChassisGroup[] GetAllReservedChassisGroups(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string search) {
            return base.Channel.GetAllReservedChassisGroups(authInfo, search);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ChassisGroup[] GetAllReservedChassisGroupsForClient(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int clientId, string search) {
            return base.Channel.GetAllReservedChassisGroupsForClient(authInfo, clientId, search);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ChassisGroup GetChassisGroup(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid guid) {
            return base.Channel.GetChassisGroup(authInfo, guid);
        }
        
        public System.Guid GetNextChassisFromGroup(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid chassisGroupGuid) {
            return base.Channel.GetNextChassisFromGroup(authInfo, chassisGroupGuid);
        }
        
        public void RefreshBMCache(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            base.Channel.RefreshBMCache(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Basket GetBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid) {
            return base.Channel.GetBasket(authInfo, basketGuid);
        }
        
        public bool IsBasketLocked(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid) {
            return base.Channel.IsBasketLocked(authInfo, basketGuid);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Basket[] GetBasketsByEmail(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string email) {
            return base.Channel.GetBasketsByEmail(authInfo, email);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.BasketItem GetBasketItem(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, System.Guid itemGuid) {
            return base.Channel.GetBasketItem(authInfo, basketGuid, itemGuid);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Cost CalcCosts(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid productGuid, IomartCodingChallenge.CodingChallengeServiceReference.BasketItemOption[] options) {
            return base.Channel.CalcCosts(authInfo, productGuid, options);
        }
        
        public void DeleteBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid) {
            base.Channel.DeleteBasketByID(authInfo, basketGuid);
        }
        
        public void DeleteBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket) {
            base.Channel.DeleteBasket(authInfo, basket);
        }
        
        public void EmptyBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid) {
            base.Channel.EmptyBasketByID(authInfo, basketGuid);
        }
        
        public void EmptyBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket) {
            base.Channel.EmptyBasket(authInfo, basket);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Basket CreateBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket) {
            return base.Channel.CreateBasket(authInfo, basket);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Basket CreateBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string email, string remoteIP, string userAgent, string referer) {
            return base.Channel.CreateBasketByID(authInfo, email, remoteIP, userAgent, referer);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Basket AddItemToBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, string descn, System.Guid productGuid, int quantity, string ipToInstallOn, string notes, IomartCodingChallenge.CodingChallengeServiceReference.BasketItemOption[] options) {
            return base.Channel.AddItemToBasketByID(authInfo, basketGuid, descn, productGuid, quantity, ipToInstallOn, notes, options);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Basket AddItemToBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket, IomartCodingChallenge.CodingChallengeServiceReference.BasketItem item, int quantity) {
            return base.Channel.AddItemToBasket(authInfo, basket, item, quantity);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Basket UpdateBasketItemByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, System.Guid itemGuid, int quantity, string ipToInstallOn, string notes, IomartCodingChallenge.CodingChallengeServiceReference.BasketItemOption[] options) {
            return base.Channel.UpdateBasketItemByID(authInfo, basketGuid, itemGuid, quantity, ipToInstallOn, notes, options);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Basket UpdateBasketItem(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket, IomartCodingChallenge.CodingChallengeServiceReference.BasketItem item) {
            return base.Channel.UpdateBasketItem(authInfo, basket, item);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Basket RemoveItemFromBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, System.Guid itemGuid) {
            return base.Channel.RemoveItemFromBasketByID(authInfo, basketGuid, itemGuid);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Basket RemoveItemFromBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket, IomartCodingChallenge.CodingChallengeServiceReference.BasketItem item) {
            return base.Channel.RemoveItemFromBasket(authInfo, basket, item);
        }
        
        public string[] ValidateBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid) {
            return base.Channel.ValidateBasketByID(authInfo, basketGuid);
        }
        
        public string[] ValidateBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket) {
            return base.Channel.ValidateBasket(authInfo, basket);
        }
        
        public string[] ValidateBasketItemByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, System.Guid itemGuid, System.Guid productGuid, IomartCodingChallenge.CodingChallengeServiceReference.BasketItemOption[] options) {
            return base.Channel.ValidateBasketItemByID(authInfo, basketGuid, itemGuid, productGuid, options);
        }
        
        public string[] ValidateBasketItem(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket, IomartCodingChallenge.CodingChallengeServiceReference.BasketItem basketItem) {
            return base.Channel.ValidateBasketItem(authInfo, basket, basketItem);
        }
        
        public void ChangeBillingPeriod(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, IomartCodingChallenge.CodingChallengeServiceReference.BillingPeriod billingPeriod) {
            base.Channel.ChangeBillingPeriod(authInfo, basketGuid, billingPeriod);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Order OrderBasketByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, IomartCodingChallenge.CodingChallengeServiceReference.BillingPeriod billingPeriod, string privateRef) {
            return base.Channel.OrderBasketByID(authInfo, basketGuid, billingPeriod, privateRef);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Order OrderBasket(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket, string privateRef) {
            return base.Channel.OrderBasket(authInfo, basket, privateRef);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Basket ChangeQuantityByID(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid basketGuid, System.Guid itemGuid, int quantity) {
            return base.Channel.ChangeQuantityByID(authInfo, basketGuid, itemGuid, quantity);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Basket ChangeQuantity(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.Basket basket, IomartCodingChallenge.CodingChallengeServiceReference.BasketItem item, int quantity) {
            return base.Channel.ChangeQuantity(authInfo, basket, item, quantity);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Order GetOrder(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string orderRef) {
            return base.Channel.GetOrder(authInfo, orderRef);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Order[] GetOrderByPrivateRef(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string privateRef) {
            return base.Channel.GetOrderByPrivateRef(authInfo, privateRef);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Order[] GetAllPendingOrders(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetAllPendingOrders(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Order[] GetAllCompletedOrders(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetAllCompletedOrders(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Order[] GetAllCancelledOrders(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetAllCancelledOrders(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.FAQ GetFAQ(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetFAQ(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.FAQSection[] GetAllSections(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetAllSections(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.FAQQuestion[] GetAllQuestions(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int sectionID) {
            return base.Channel.GetAllQuestions(authInfo, sectionID);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.FAQSection GetSection(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int sectionID) {
            return base.Channel.GetSection(authInfo, sectionID);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.FAQQuestion GetQuestion(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int questionID) {
            return base.Channel.GetQuestion(authInfo, questionID);
        }
        
        public void AddNullRoute(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ipAddress, string reason) {
            base.Channel.AddNullRoute(authInfo, ipAddress, reason);
        }
        
        public void ClearNullRoute(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ipAddress) {
            base.Channel.ClearNullRoute(authInfo, ipAddress);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.NullRoute[] GetActiveNullRoutes(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetActiveNullRoutes(authInfo);
        }
        
        public void WriteIPSafeList(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ipAddress, string notes) {
            base.Channel.WriteIPSafeList(authInfo, ipAddress, notes);
        }
        
        public void DeleteIPSafeList(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ipAddress) {
            base.Channel.DeleteIPSafeList(authInfo, ipAddress);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.IPSafeListEntry[] GetIPSafeList(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string search) {
            return base.Channel.GetIPSafeList(authInfo, search);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.Licence[] GetLicences(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId) {
            return base.Channel.GetLicences(authInfo, serviceId);
        }
        
        public void AddLicence(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, IomartCodingChallenge.CodingChallengeServiceReference.LicenceType type, string licenceIP) {
            base.Channel.AddLicence(authInfo, serviceId, type, licenceIP);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.AvailableLicenceType[] GetLicenceTypes(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetLicenceTypes(authInfo);
        }
        
        public void RemoveLicenceByIPAddress(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, IomartCodingChallenge.CodingChallengeServiceReference.LicenceType type, string licenceIPAddress) {
            base.Channel.RemoveLicenceByIPAddress(authInfo, serviceId, type, licenceIPAddress);
        }
        
        public void RemoveLicenceByProviderReference(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, string providerReference) {
            base.Channel.RemoveLicenceByProviderReference(authInfo, serviceId, providerReference);
        }
        
        public bool AreCredentialsValid(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.AreCredentialsValid(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ClientInfo GetClientInfo(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authClient) {
            return base.Channel.GetClientInfo(authInfo, authClient);
        }
        
        public string[] GetAvailableIPs(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.Guid clientGuid) {
            return base.Channel.GetAvailableIPs(authInfo, clientGuid);
        }
        
        public int GetServerCount(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetServerCount(authInfo);
        }
        
        public string[] GetAllServerIDs(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetAllServerIDs(authInfo);
        }
        
        public string GetServerByIPAddress(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ip) {
            return base.Channel.GetServerByIPAddress(authInfo, ip);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ServerInfo GetServerDetails(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId) {
            return base.Channel.GetServerDetails(authInfo, serviceId);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ServerInfo[] GetAllServerDetails(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetAllServerDetails(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ServerInfo[] SearchServers(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.ServerStatusSearch[] status, IomartCodingChallenge.CodingChallengeServiceReference.ServerServiceTypeSearch[] serviceType, IomartCodingChallenge.CodingChallengeServiceReference.ServerDeviceTypeSearch[] deviceType, string filter, bool showIPs, bool showComponents, bool showReverseDNS) {
            return base.Channel.SearchServers(authInfo, status, serviceType, deviceType, filter, showIPs, showComponents, showReverseDNS);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ServerInfo[] GetAllCurrentServers(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetAllCurrentServers(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.NICInfo[] GetServerNICs(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId) {
            return base.Channel.GetServerNICs(authInfo, serviceId);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.IPInfo LookupIP(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ip) {
            return base.Channel.LookupIP(authInfo, ip);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.IPInfo LookupPrivateIP(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ip, System.Nullable<int> subnetID) {
            return base.Channel.LookupPrivateIP(authInfo, ip, subnetID);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.RequestStatus PowerCycleServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId) {
            return base.Channel.PowerCycleServer(authInfo, serviceId);
        }
        
        public int GetRemainingKvmCount(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId) {
            return base.Channel.GetRemainingKvmCount(authInfo, serviceId);
        }
        
        public int GetRemainingRecoverySessionCount(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId) {
            return base.Channel.GetRemainingRecoverySessionCount(authInfo, serviceId);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.RequestStatus RequestKvm(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId) {
            return base.Channel.RequestKvm(authInfo, serviceId);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.RequestStatus RequestRecoverySession(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId) {
            return base.Channel.RequestRecoverySession(authInfo, serviceId);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.RequestStatus GetRequestStatusUpdate(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int requestid) {
            return base.Channel.GetRequestStatusUpdate(authInfo, requestid);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.RequestStatus[] GetAllRequestStatusUpdate(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.RequestStatusSearch search) {
            return base.Channel.GetAllRequestStatusUpdate(authInfo, search);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.RecoverySessionDetails GetSessionDetails(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int requestid) {
            return base.Channel.GetSessionDetails(authInfo, requestid);
        }
        
        public void SetRecoveryMode(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, bool recoverymode) {
            base.Channel.SetRecoveryMode(authInfo, serviceId, recoverymode);
        }
        
        public void SetYourServerRef(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, string yourServerRef) {
            base.Channel.SetYourServerRef(authInfo, serviceId, yourServerRef);
        }
        
        public void CancelRequest(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int requestid) {
            base.Channel.CancelRequest(authInfo, requestid);
        }
        
        public void TerminateKVM(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int requestid) {
            base.Channel.TerminateKVM(authInfo, requestid);
        }
        
        public void CancelServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, System.DateTime cancellationDate, IomartCodingChallenge.CodingChallengeServiceReference.CancellationReason reason, string details, string comments) {
            base.Channel.CancelServer(authInfo, serviceId, cancellationDate, reason, details, comments);
        }
        
        public void UncancelServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId) {
            base.Channel.UncancelServer(authInfo, serviceId);
        }
        
        public void SuspendServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, string reason) {
            base.Channel.SuspendServer(authInfo, serviceId, reason);
        }
        
        public void UnsuspendServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId) {
            base.Channel.UnsuspendServer(authInfo, serviceId);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.ReverseDnsEntry[] GetReverseDnsEntries(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetReverseDnsEntries(authInfo);
        }
        
        public string GetReverseDnsEntry(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ip) {
            return base.Channel.GetReverseDnsEntry(authInfo, ip);
        }
        
        public void SetReverseDnsEntry(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string ip, string hostname) {
            base.Channel.SetReverseDnsEntry(authInfo, ip, hostname);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.MonthlyBandwidthReportEntry[] GetMonthlyBandwidthReport(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, bool external) {
            return base.Channel.GetMonthlyBandwidthReport(authInfo, serviceId, external);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.BandwidthReport GetServerBandwidthReport(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, bool external) {
            return base.Channel.GetServerBandwidthReport(authInfo, serviceId, external);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.AlertInfo[] GetAlerts(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId) {
            return base.Channel.GetAlerts(authInfo, serviceId);
        }
        
        public int AddAlert(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, string alertType, string dest, System.Nullable<int> initDelay, System.Nullable<int> repeatDelay, System.Nullable<bool> alertOnWarn, System.Nullable<bool> alertOnFail) {
            return base.Channel.AddAlert(authInfo, serviceId, alertType, dest, initDelay, repeatDelay, alertOnWarn, alertOnFail);
        }
        
        public void RemoveAlert(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, int alertId) {
            base.Channel.RemoveAlert(authInfo, serviceId, alertId);
        }
        
        public int[] GetAllTestIDs(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetAllTestIDs(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.CurrentMonitorStatus[] GetServerStatus(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId) {
            return base.Channel.GetServerStatus(authInfo, serviceId);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.CurrentMonitorStatus[] GetMultipleServerStatus(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string[] serviceIds) {
            return base.Channel.GetMultipleServerStatus(authInfo, serviceIds);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.CurrentMonitorStatus[] GetAllServerIssues(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetAllServerIssues(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.CurrentMonitorStatus[] GetAllServerIssues2(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetAllServerIssues2(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.TestResult[] GetTestHistory(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, int testId, int rows) {
            return base.Channel.GetTestHistory(authInfo, serviceId, testId, rows);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.TestResult[] GetMultipleTestResults(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int[] testIds) {
            return base.Channel.GetMultipleTestResults(authInfo, testIds);
        }
        
        public string[] GetTestTypes() {
            return base.Channel.GetTestTypes();
        }
        
        public int AddTest(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, string testType, string ip, string arg1) {
            return base.Channel.AddTest(authInfo, serviceId, testType, ip, arg1);
        }
        
        public void RemoveTest(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, int testId) {
            base.Channel.RemoveTest(authInfo, serviceId, testId);
        }
        
        public int RequestIPs(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, int number, string reason) {
            return base.Channel.RequestIPs(authInfo, serviceId, number, reason);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.IPRequestStatus GetIPRequestStatus(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string serviceId, int requestId) {
            return base.Channel.GetIPRequestStatus(authInfo, serviceId, requestId);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo[] GetSubnets(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.SubnetType type, string search) {
            return base.Channel.GetSubnets(authInfo, type, search);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo GetSubnet(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int subnetid) {
            return base.Channel.GetSubnet(authInfo, subnetid);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo CreateQuickSubnet(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string cidrstring) {
            return base.Channel.CreateQuickSubnet(authInfo, cidrstring);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo CreateSubnet(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo si) {
            return base.Channel.CreateSubnet(authInfo, si);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo ChangeSubnet(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, IomartCodingChallenge.CodingChallengeServiceReference.SubnetInfo subnet) {
            return base.Channel.ChangeSubnet(authInfo, subnet);
        }
        
        public void DeleteSubnet(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int subnetid) {
            base.Channel.DeleteSubnet(authInfo, subnetid);
        }
        
        public string[] GetIPAddressesForSubnet(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int subnetID) {
            return base.Channel.GetIPAddressesForSubnet(authInfo, subnetID);
        }
        
        public void AssignIPToServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int subnetid, string ipaddr, int nicid) {
            base.Channel.AssignIPToServer(authInfo, subnetid, ipaddr, nicid);
        }
        
        public void RemoveIPFromServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int subnetid, string ipaddr) {
            base.Channel.RemoveIPFromServer(authInfo, subnetid, ipaddr);
        }
        
        public int GetDomainCount(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetDomainCount(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.HostedDomainInfo[] GetForwardDnsDomains(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetForwardDnsDomains(authInfo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.HostedDomainInfo GetForwardDnsDomain(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId) {
            return base.Channel.GetForwardDnsDomain(authInfo, domainId);
        }
        
        public int AddForwardDnsDomain(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string domainName, string hostingType, string primaryNS) {
            return base.Channel.AddForwardDnsDomain(authInfo, domainName, hostingType, primaryNS);
        }
        
        public void DeleteForwardDnsDomain(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId) {
            base.Channel.DeleteForwardDnsDomain(authInfo, domainId);
        }
        
        public void UpdateDomainHostingSettings(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string hostingType, string primaryNS, string allowedTransferList, System.Nullable<int> defaultTTL) {
            base.Channel.UpdateDomainHostingSettings(authInfo, domainId, hostingType, primaryNS, allowedTransferList, defaultTTL);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.HostedDomainRecord[] GetForwardDnsEntries(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId) {
            return base.Channel.GetForwardDnsEntries(authInfo, domainId);
        }
        
        public void DeleteForwardDnsEntry(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, int recordId) {
            base.Channel.DeleteForwardDnsEntry(authInfo, domainId, recordId);
        }
        
        public void AddDnsARecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string recordName, string ip, System.Nullable<int> ttl) {
            base.Channel.AddDnsARecord(authInfo, domainId, recordName, ip, ttl);
        }
        
        public void AddDnsAAAARecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string recordName, string ip, System.Nullable<int> ttl) {
            base.Channel.AddDnsAAAARecord(authInfo, domainId, recordName, ip, ttl);
        }
        
        public void AddDnsCNAMERecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string recordName, string destination, System.Nullable<int> ttl) {
            base.Channel.AddDnsCNAMERecord(authInfo, domainId, recordName, destination, ttl);
        }
        
        public void AddDnsMXRecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string mailServer, int priority, string subDomain, System.Nullable<int> ttl) {
            base.Channel.AddDnsMXRecord(authInfo, domainId, mailServer, priority, subDomain, ttl);
        }
        
        public void AddDnsNSRecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string hostName, string subDomain, System.Nullable<int> ttl) {
            base.Channel.AddDnsNSRecord(authInfo, domainId, hostName, subDomain, ttl);
        }
        
        public void AddDnsSRVRecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string serviceName, int priority, int weight, int port, string hostName, System.Nullable<int> ttl) {
            base.Channel.AddDnsSRVRecord(authInfo, domainId, serviceName, priority, weight, port, hostName, ttl);
        }
        
        public void AddDnsTXTRecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string recordName, string data, System.Nullable<int> ttl) {
            base.Channel.AddDnsTXTRecord(authInfo, domainId, recordName, data, ttl);
        }
        
        public void AddDnsSPFRecord(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, int domainId, string subDomain, string spfData, System.Nullable<int> ttl) {
            base.Channel.AddDnsSPFRecord(authInfo, domainId, subDomain, spfData, ttl);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.DomainContact[] GetDomainContacts(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetDomainContacts(authInfo);
        }
        
        public bool CheckDomainAvailability(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string domainName) {
            return base.Channel.CheckDomainAvailability(authInfo, domainName);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.DomainAvailability[] CheckMultipleDomainsAvailability(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string[] domainNames) {
            return base.Channel.CheckMultipleDomainsAvailability(authInfo, domainNames);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.TopLevelDomain[] GetAllTLDs(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetAllTLDs(authInfo);
        }
        
        public string RegisterDomain(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string domainName, int years, int techContactId, int adminContactId, int ownerContactId) {
            return base.Channel.RegisterDomain(authInfo, domainName, years, techContactId, adminContactId, ownerContactId);
        }
        
        public string RegisterDomains(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string[] domainNames, int years, int techContactId, int adminContactId, int ownerContactId) {
            return base.Channel.RegisterDomains(authInfo, domainNames, years, techContactId, adminContactId, ownerContactId);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.InvoiceHeader[] GetInvoiceHeaders(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, System.DateTime from, System.DateTime to) {
            return base.Channel.GetInvoiceHeaders(authInfo, from, to);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.InvoiceItem[] GetInvoiceItems(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string invoiceNo) {
            return base.Channel.GetInvoiceItems(authInfo, invoiceNo);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.InvoiceItem[] GetInvoiceItemsByServer(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo, string invoiceNo, string serviceID) {
            return base.Channel.GetInvoiceItemsByServer(authInfo, invoiceNo, serviceID);
        }
        
        public IomartCodingChallenge.CodingChallengeServiceReference.AccountSummary GetAccountSummary(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetAccountSummary(authInfo);
        }
        
        public int GetUnreadMessageCount(IomartCodingChallenge.CodingChallengeServiceReference.AuthInfo authInfo) {
            return base.Channel.GetUnreadMessageCount(authInfo);
        }
    }
}
